[package]
name = "vexfs"
version = "1.0.0"
edition = "2021"
authors = ["VexFS Contributors"]
description = "Vector Extended File System - A filesystem optimized for vector embeddings and similarity search"
repository = "https://github.com/vexfs/vexfs"
license = "Apache-2.0"
readme = "README.md"
keywords = ["filesystem", "vector", "embeddings", "similarity-search", "kernel"]
categories = ["filesystem", "science", "data-structures"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Note: VexFS uses C FFI approach for kernel integration, not Rust-for-Linux

# Dependencies for no_std compatibility
hashbrown = { version = "0.14", default-features = false }
libm = { version = "0.2", default-features = false }
derivative = "2.2"
linked_list_allocator = { version = "0.10", optional = true }

# Cross-Layer Integration Framework dependencies (Task 21)
crossbeam = { version = "0.8", optional = true }
im = { version = "15.1", optional = true }
nom = { version = "7.1", optional = true }
rayon = { version = "1.8", optional = true }

# Advanced Graph Algorithms and Semantic Reasoning dependencies (Task 20)
petgraph = { version = "0.6.4", optional = true }
rug = { version = "1.19.2", optional = true }
memmap2 = { version = "0.5.10", optional = true }
dashmap = { version = "5.5", optional = true }
parking_lot = { version = "0.12", optional = true }

# Semantic Search Integration dependencies (Task 11)
faiss = { version = "0.12", optional = true }
candle-core = { version = "0.3", optional = true }
candle-nn = { version = "0.3", optional = true }
candle-transformers = { version = "0.3", optional = true }
hf-hub = { version = "0.3", optional = true }
tokenizers = { version = "0.15", optional = true }

# FUSE dependencies (optional for userspace testing)
fuse = { version = "0.3", optional = true }
time = { version = "0.3", optional = true }
time01 = { package = "time", version = "0.1", optional = true }
clap = { version = "4.0", features = ["derive"], optional = true }
libc = { version = "0.2", optional = true }

# VexCTL dependencies (optional for command-line tool)
nix = { version = "0.27", features = ["fs", "ioctl", "mount"], optional = true }
console = { version = "0.15", optional = true }
tabled = { version = "0.14", optional = true }
indicatif = { version = "0.17", optional = true }
thiserror = { version = "1.0", optional = true }
url = { version = "2.5", optional = true }
env_logger = { version = "0.10", optional = true }

# Semantic API dependencies
reqwest = { version = "0.11", features = ["json"], optional = true }
tokio-tungstenite = { version = "0.20", optional = true }
serde_cbor = { version = "0.11", optional = true }

# Server dependencies (optional for ChromaDB-compatible API)
axum = { version = "0.7", features = ["ws"], optional = true }
tokio = { version = "1.0", features = ["full"], optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["cors", "fs", "trace"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"], optional = true }
chrono = { version = "0.4", features = ["serde"], optional = true }

[dev-dependencies]
fastrand = "2.0"
chrono = { version = "0.4", features = ["serde"] }
proptest = "1.4"
criterion = { version = "0.5", features = ["html_reports"] }
loom = "0.7"

[lib]
crate-type = ["lib", "staticlib"]
path = "rust/src/lib.rs"

# Test binaries - temporarily disabled due to module access issues
# These benchmarks need to be refactored to use the public API or moved to examples/
# [[bin]]
# name = "comprehensive_test_runner"
# path = "rust/src/bin/comprehensive_test_runner.rs"

# [[bin]]
# name = "vector_test_runner"
# path = "rust/src/bin/vector_test_runner.rs"

# [[bin]]
# name = "vector_cache_benchmark"
# path = "rust/src/bin/vector_cache_benchmark.rs"

# [[bin]]
# name = "cow_snapshot_benchmark"
# path = "rust/src/bin/cow_snapshot_benchmark.rs"

# [[bin]]
# name = "vector_benchmark"
# path = "rust/src/bin/vector_benchmark.rs"


[profile.release]
panic = "abort"
opt-level = 2
lto = true

[profile.dev]
panic = "abort"
opt-level = 0

# NEW: Profiling profile for Task 23.1 FUSE stack overflow analysis
[profile.profiling]
inherits = "release"
debug = true          # Enable debug symbols for accurate profiling
opt-level = 1         # Light optimization to preserve stack frames
lto = false          # Disable LTO to preserve function boundaries
codegen-units = 1    # Single codegen unit for better profiling accuracy
panic = "unwind"     # Enable unwinding for better stack traces
overflow-checks = true # Enable overflow checks for debugging

# Target-specific configuration for kernel module is now in .cargo/config.toml

# Features for conditional compilation
[features]
default = ["std"]

# Mutually exclusive feature groups
std = ["serde", "serde_json", "uuid"]
kernel = ["linked_list_allocator"]  # Mutually exclusive with std
kernel-minimal = []  # Minimal kernel feature set

# Additional feature groups
c_bindings = []  # New feature for current C FFI approach
cross_layer_integration = ["std", "crossbeam", "im", "nom", "rayon", "tokio", "tracing", "serde", "serde_json", "uuid"]  # Cross-Layer Integration Framework (Task 21)
fuse_support = ["std", "fuse", "time", "time01", "clap", "libc"]  # FUSE userspace testing (requires std)
server = ["std", "axum", "tokio", "tower", "tower-http", "tracing", "tracing-subscriber", "serde", "serde_json", "uuid", "chrono"]  # ChromaDB-compatible server (requires std)
vexctl = ["std", "nix", "console", "tabled", "indicatif", "thiserror", "clap", "chrono", "serde", "serde_json", "url", "env_logger"]  # VexCTL command-line tool (requires std)
semantic_api = ["std", "axum", "tokio", "tower", "tower-http", "tracing", "serde", "serde_json", "uuid", "chrono", "reqwest", "tokio-tungstenite", "serde_cbor", "url", "crossbeam"]  # Semantic API for agent integration
semantic_search = ["std", "faiss", "candle-core", "candle-nn", "candle-transformers", "hf-hub", "tokenizers", "serde", "serde_json", "uuid", "chrono", "tokio", "tracing", "crossbeam", "rayon"]  # Semantic Search Integration for VexGraph (Task 11)
advanced_graph_algorithms = ["std", "petgraph", "rug", "memmap2", "dashmap", "parking_lot", "rayon", "serde", "serde_json", "uuid", "chrono", "tokio", "tracing", "thiserror"]  # Advanced Graph Algorithms and Semantic Reasoning (Task 20)
vexgraph = ["std", "petgraph", "dashmap", "rayon", "parking_lot", "crossbeam", "axum", "tokio", "tower", "tower-http", "tracing", "tracing-subscriber", "serde", "serde_json", "uuid", "chrono"]  # VexGraph Native Graph Representation and API (Task 17)

[[bin]]
name = "vexfs_fuse"
path = "rust/src/bin/vexfs_fuse.rs"
required-features = ["fuse_support"]

[[bin]]
name = "vexfs_server"
path = "rust/src/bin/vexfs_server.rs"
required-features = ["server"]

[[bin]]
name = "vexfs_server_enhanced"
path = "rust/src/bin/vexfs_server_enhanced.rs"
required-features = ["server"]

[[bin]]
name = "vexfs_unified_server"
path = "rust/src/bin/vexfs_unified_server.rs"
required-features = ["server"]

# Task 22: Comprehensive AI-Native Semantic Substrate Testing Framework
[[bin]]
name = "task_22_comprehensive_testing"
path = "tests/task_22_comprehensive_testing.rs"
required-features = ["std", "tokio"]

[[bin]]
name = "mkfs_vexfs"
path = "rust/src/bin/mkfs_vexfs.rs"
required-features = ["std"]

[[bin]]
name = "vexctl"
path = "rust/src/bin/vexctl.rs"
required-features = ["vexctl"]

[[bin]]
name = "comprehensive_test_runner"
path = "rust/src/bin/comprehensive_test_runner.rs"
required-features = ["std"]

[[bin]]
name = "vector_test_runner"
path = "rust/src/bin/vector_test_runner.rs"
required-features = ["std"]

[[bin]]
name = "anns_benchmark_test"
path = "rust/src/bin/anns_benchmark_test.rs"
required-features = ["std"]

# Test configuration
[package.metadata.test]
# Test discovery patterns
test_patterns = ["test_*.rs", "*_test.rs"]
integration_patterns = ["integration_*.rs"]
performance_patterns = ["perf_*.rs", "bench_*.rs"]

# Test categories for selective execution
[package.metadata.test.categories]
unit = ["test_*"]
integration = ["integration_*"]
performance = ["perf_*", "bench_*"]
security = ["security_*"]

# Test tags for filtering
[package.metadata.test.tags]
quick = "Tests that run in < 10 seconds"
slow = "Tests that run in > 30 seconds"
vm_required = "Tests requiring VM environment"
kernel_module = "Kernel module specific tests"
filesystem = "Filesystem operation tests"
vector_operations = "Vector storage and search tests"
fuse = "FUSE implementation tests"
safe = "Safe to run in any environment"
risky = "May affect system stability"
dangerous = "High risk, VM-only execution"

# Examples
[[example]]
name = "semantic_event_hooks_example"
path = "examples/semantic_event_hooks_example.rs"
required-features = ["semantic_api"]