name: VexFS v2 Qdrant Adapter - Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: vexfs/qdrant-adapter

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety

    - name: Code formatting check (Black)
      run: black --check --diff src/ tests/ benchmarks/ monitoring/

    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/ benchmarks/ monitoring/

    - name: Linting (flake8)
      run: flake8 src/ tests/ benchmarks/ monitoring/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Type checking (mypy)
      run: mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Security scan (bandit)
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability scan (safety)
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-suite: ['unit', 'integration', 'phase3-advanced']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Run unit tests
      if: matrix.test-suite == 'unit'
      run: |
        pytest tests/test_*.py -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      if: matrix.test-suite == 'integration'
      run: |
        pytest tests/test_*integration*.py -v --cov=src --cov-append --cov-report=xml

    - name: Run Phase 3 advanced tests
      if: matrix.test-suite == 'phase3-advanced'
      run: |
        pytest tests/test_phase3_advanced.py -v --cov=src --cov-append --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-suite }}
        name: codecov-${{ matrix.test-suite }}

  # Performance Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil numpy aiohttp

    - name: Run performance benchmarks
      run: |
        cd benchmarks
        python -m performance_suite --url http://localhost:6333 --output benchmark-results.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmarks/benchmark-results.json

    - name: Performance regression check
      run: |
        if [ -f "benchmarks/baseline.json" ]; then
          cd benchmarks
          python -m regression_testing --current benchmark-results.json --baseline baseline.json
        fi
      continue-on-error: true

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=2.0.0-phase4,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=2.0.0-phase4
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Kubernetes Validation
  kubernetes:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        kubectl --dry-run=client apply -f k8s/production/
        kubectl --dry-run=server apply -f k8s/production/ || echo "Server-side validation failed (expected without cluster)"

    - name: Lint Kubernetes manifests
      run: |
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
        # Validate manifests
        kubeval k8s/production/*.yaml

    - name: Security scan Kubernetes manifests
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar xf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin
        
        # Scan manifests
        kubesec scan k8s/production/*.yaml

  # End-to-End Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Start services
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30  # Wait for services to start

    - name: Run E2E tests
      run: |
        python -m pytest tests/test_e2e.py -v --tb=short
      continue-on-error: true

    - name: Collect logs
      if: always()
      run: |
        docker-compose logs > e2e-logs.txt

    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-artifacts
        path: |
          e2e-logs.txt

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test, benchmarks, docker, kubernetes, e2e]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success' }}
      run: |
        echo "✅ CI Pipeline completed successfully"
        echo "All quality gates passed for commit ${{ github.sha }}"

    - name: Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "❌ CI Pipeline failed"
        echo "Quality gates failed for commit ${{ github.sha }}"
        exit 1