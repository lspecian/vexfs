# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import qdrant_pb2 as qdrant__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in qdrant_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QdrantStub(object):
    """Main Qdrant gRPC service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/qdrant.Qdrant/CreateCollection',
                request_serializer=qdrant__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=qdrant__pb2.CollectionOperationResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/qdrant.Qdrant/DeleteCollection',
                request_serializer=qdrant__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=qdrant__pb2.CollectionOperationResponse.FromString,
                _registered_method=True)
        self.GetCollectionInfo = channel.unary_unary(
                '/qdrant.Qdrant/GetCollectionInfo',
                request_serializer=qdrant__pb2.GetCollectionInfoRequest.SerializeToString,
                response_deserializer=qdrant__pb2.GetCollectionInfoResponse.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/qdrant.Qdrant/ListCollections',
                request_serializer=qdrant__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.UpdateCollection = channel.unary_unary(
                '/qdrant.Qdrant/UpdateCollection',
                request_serializer=qdrant__pb2.UpdateCollectionRequest.SerializeToString,
                response_deserializer=qdrant__pb2.CollectionOperationResponse.FromString,
                _registered_method=True)
        self.UpsertPoints = channel.unary_unary(
                '/qdrant.Qdrant/UpsertPoints',
                request_serializer=qdrant__pb2.UpsertPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.PointsOperationResponse.FromString,
                _registered_method=True)
        self.DeletePoints = channel.unary_unary(
                '/qdrant.Qdrant/DeletePoints',
                request_serializer=qdrant__pb2.DeletePointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.PointsOperationResponse.FromString,
                _registered_method=True)
        self.GetPoints = channel.unary_unary(
                '/qdrant.Qdrant/GetPoints',
                request_serializer=qdrant__pb2.GetPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.GetPointsResponse.FromString,
                _registered_method=True)
        self.SearchPoints = channel.unary_unary(
                '/qdrant.Qdrant/SearchPoints',
                request_serializer=qdrant__pb2.SearchPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.SearchPointsBatch = channel.unary_unary(
                '/qdrant.Qdrant/SearchPointsBatch',
                request_serializer=qdrant__pb2.SearchPointsBatchRequest.SerializeToString,
                response_deserializer=qdrant__pb2.SearchBatchResponse.FromString,
                _registered_method=True)
        self.StreamSearchPoints = channel.unary_stream(
                '/qdrant.Qdrant/StreamSearchPoints',
                request_serializer=qdrant__pb2.SearchPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.StreamUpsertPoints = channel.stream_unary(
                '/qdrant.Qdrant/StreamUpsertPoints',
                request_serializer=qdrant__pb2.UpsertPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.PointsOperationResponse.FromString,
                _registered_method=True)
        self.StreamGetPoints = channel.unary_stream(
                '/qdrant.Qdrant/StreamGetPoints',
                request_serializer=qdrant__pb2.GetPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.GetPointsResponse.FromString,
                _registered_method=True)
        self.Recommend = channel.unary_unary(
                '/qdrant.Qdrant/Recommend',
                request_serializer=qdrant__pb2.RecommendRequest.SerializeToString,
                response_deserializer=qdrant__pb2.RecommendResponse.FromString,
                _registered_method=True)
        self.Scroll = channel.unary_unary(
                '/qdrant.Qdrant/Scroll',
                request_serializer=qdrant__pb2.ScrollRequest.SerializeToString,
                response_deserializer=qdrant__pb2.ScrollResponse.FromString,
                _registered_method=True)
        self.CountPoints = channel.unary_unary(
                '/qdrant.Qdrant/CountPoints',
                request_serializer=qdrant__pb2.CountPointsRequest.SerializeToString,
                response_deserializer=qdrant__pb2.CountResponse.FromString,
                _registered_method=True)


class QdrantServicer(object):
    """Main Qdrant gRPC service definition
    """

    def CreateCollection(self, request, context):
        """Collection management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollectionInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertPoints(self, request, context):
        """Point operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchPointsBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSearchPoints(self, request, context):
        """Streaming operations (Phase 2 focus)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUpsertPoints(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamGetPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recommend(self, request, context):
        """Additional operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scroll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QdrantServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=qdrant__pb2.CreateCollectionRequest.FromString,
                    response_serializer=qdrant__pb2.CollectionOperationResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=qdrant__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=qdrant__pb2.CollectionOperationResponse.SerializeToString,
            ),
            'GetCollectionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollectionInfo,
                    request_deserializer=qdrant__pb2.GetCollectionInfoRequest.FromString,
                    response_serializer=qdrant__pb2.GetCollectionInfoResponse.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=qdrant__pb2.ListCollectionsRequest.FromString,
                    response_serializer=qdrant__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'UpdateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCollection,
                    request_deserializer=qdrant__pb2.UpdateCollectionRequest.FromString,
                    response_serializer=qdrant__pb2.CollectionOperationResponse.SerializeToString,
            ),
            'UpsertPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertPoints,
                    request_deserializer=qdrant__pb2.UpsertPointsRequest.FromString,
                    response_serializer=qdrant__pb2.PointsOperationResponse.SerializeToString,
            ),
            'DeletePoints': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePoints,
                    request_deserializer=qdrant__pb2.DeletePointsRequest.FromString,
                    response_serializer=qdrant__pb2.PointsOperationResponse.SerializeToString,
            ),
            'GetPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPoints,
                    request_deserializer=qdrant__pb2.GetPointsRequest.FromString,
                    response_serializer=qdrant__pb2.GetPointsResponse.SerializeToString,
            ),
            'SearchPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchPoints,
                    request_deserializer=qdrant__pb2.SearchPointsRequest.FromString,
                    response_serializer=qdrant__pb2.SearchResponse.SerializeToString,
            ),
            'SearchPointsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchPointsBatch,
                    request_deserializer=qdrant__pb2.SearchPointsBatchRequest.FromString,
                    response_serializer=qdrant__pb2.SearchBatchResponse.SerializeToString,
            ),
            'StreamSearchPoints': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSearchPoints,
                    request_deserializer=qdrant__pb2.SearchPointsRequest.FromString,
                    response_serializer=qdrant__pb2.SearchResponse.SerializeToString,
            ),
            'StreamUpsertPoints': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamUpsertPoints,
                    request_deserializer=qdrant__pb2.UpsertPointsRequest.FromString,
                    response_serializer=qdrant__pb2.PointsOperationResponse.SerializeToString,
            ),
            'StreamGetPoints': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamGetPoints,
                    request_deserializer=qdrant__pb2.GetPointsRequest.FromString,
                    response_serializer=qdrant__pb2.GetPointsResponse.SerializeToString,
            ),
            'Recommend': grpc.unary_unary_rpc_method_handler(
                    servicer.Recommend,
                    request_deserializer=qdrant__pb2.RecommendRequest.FromString,
                    response_serializer=qdrant__pb2.RecommendResponse.SerializeToString,
            ),
            'Scroll': grpc.unary_unary_rpc_method_handler(
                    servicer.Scroll,
                    request_deserializer=qdrant__pb2.ScrollRequest.FromString,
                    response_serializer=qdrant__pb2.ScrollResponse.SerializeToString,
            ),
            'CountPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.CountPoints,
                    request_deserializer=qdrant__pb2.CountPointsRequest.FromString,
                    response_serializer=qdrant__pb2.CountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qdrant.Qdrant', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qdrant.Qdrant', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Qdrant(object):
    """Main Qdrant gRPC service definition
    """

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/CreateCollection',
            qdrant__pb2.CreateCollectionRequest.SerializeToString,
            qdrant__pb2.CollectionOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/DeleteCollection',
            qdrant__pb2.DeleteCollectionRequest.SerializeToString,
            qdrant__pb2.CollectionOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollectionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/GetCollectionInfo',
            qdrant__pb2.GetCollectionInfoRequest.SerializeToString,
            qdrant__pb2.GetCollectionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/ListCollections',
            qdrant__pb2.ListCollectionsRequest.SerializeToString,
            qdrant__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/UpdateCollection',
            qdrant__pb2.UpdateCollectionRequest.SerializeToString,
            qdrant__pb2.CollectionOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpsertPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/UpsertPoints',
            qdrant__pb2.UpsertPointsRequest.SerializeToString,
            qdrant__pb2.PointsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/DeletePoints',
            qdrant__pb2.DeletePointsRequest.SerializeToString,
            qdrant__pb2.PointsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/GetPoints',
            qdrant__pb2.GetPointsRequest.SerializeToString,
            qdrant__pb2.GetPointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/SearchPoints',
            qdrant__pb2.SearchPointsRequest.SerializeToString,
            qdrant__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchPointsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/SearchPointsBatch',
            qdrant__pb2.SearchPointsBatchRequest.SerializeToString,
            qdrant__pb2.SearchBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamSearchPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/qdrant.Qdrant/StreamSearchPoints',
            qdrant__pb2.SearchPointsRequest.SerializeToString,
            qdrant__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamUpsertPoints(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/qdrant.Qdrant/StreamUpsertPoints',
            qdrant__pb2.UpsertPointsRequest.SerializeToString,
            qdrant__pb2.PointsOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamGetPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/qdrant.Qdrant/StreamGetPoints',
            qdrant__pb2.GetPointsRequest.SerializeToString,
            qdrant__pb2.GetPointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Recommend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/Recommend',
            qdrant__pb2.RecommendRequest.SerializeToString,
            qdrant__pb2.RecommendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Scroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/Scroll',
            qdrant__pb2.ScrollRequest.SerializeToString,
            qdrant__pb2.ScrollResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qdrant.Qdrant/CountPoints',
            qdrant__pb2.CountPointsRequest.SerializeToString,
            qdrant__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
