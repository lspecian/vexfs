# VexFS Kernel Module Build Configuration
# Supports multiple build variants: standard FFI, safe FFI, C-only, and safe mode

# Module name
obj-m := vexfs.o

# Conditional source files based on build variant
ifdef VEXFS_SAFE_FFI
    # Safe FFI build: Use safe FFI module with Rust FFI integration
    vexfs-objs := ../src/vexfs_module_entry.o vexfs_rust_safe_ffi_combined.o
    ccflags-y += -DVEXFS_SAFE_FFI_MODE=1
    ccflags-y += -DVEXFS_WITH_RUST_FFI=1
else ifdef VEXFS_SAFE_MODE
    # Safe mode build: Use safe module without FFI
    vexfs-objs := ../src/vexfs_module_entry.o
    ccflags-y += -DVEXFS_SAFE_MODE=1
else ifdef VEXFS_C_ONLY
    # C-only build: No Rust FFI integration
    vexfs-objs := ../src/vexfs_module_entry.o
    ccflags-y += -DVEXFS_C_ONLY=1
else
    # Standard build: Full FFI integration
    vexfs-objs := ../src/vexfs_module_entry.o vexfs_rust_combined.o
    ccflags-y += -DVEXFS_WITH_RUST_FFI=1
endif

# Include paths
ccflags-y += -I$(src)/../include
ccflags-y += -I$(src)/../../rust/target/x86_64-unknown-linux-gnu/release/build/

# Compiler flags for kernel module
ccflags-y += -Wall -Wextra
ccflags-y += -Wno-unused-parameter
ccflags-y += -Wno-missing-field-initializers

# Debug flags (conditional)
ifdef VEXFS_DEBUG
    ccflags-y += -DDEBUG -g
endif

# Optimization flags
ccflags-y += -O2

# Architecture-specific flags
ifdef CONFIG_X86_64
    ccflags-y += -mcmodel=kernel
endif

# Rust FFI specific flags
ifdef VEXFS_WITH_RUST_FFI
    ccflags-y += -DVEXFS_RUST_FFI_ENABLED=1
    # Link against required kernel libraries for FFI
    ldflags-y += -static
endif

# Safe FFI specific flags
ifdef VEXFS_SAFE_FFI_MODE
    ccflags-y += -DVEXFS_SAFE_FFI_ENABLED=1
    ccflags-y += -DVEXFS_FFI_TIMEOUT_MS=5000
    ccflags-y += -DVEXFS_MAX_RETRY_COUNT=3
endif

# Version information
ccflags-y += -DVEXFS_VERSION_MAJOR=1
ccflags-y += -DVEXFS_VERSION_MINOR=0
ccflags-y += -DVEXFS_VERSION_PATCH=0

# Build variant identification
ifdef VEXFS_SAFE_FFI
    ccflags-y += -DVEXFS_BUILD_VARIANT=\"safe-ffi\"
else ifdef VEXFS_SAFE_MODE
    ccflags-y += -DVEXFS_BUILD_VARIANT=\"safe\"
else ifdef VEXFS_C_ONLY
    ccflags-y += -DVEXFS_BUILD_VARIANT=\"c-only\"
else
    ccflags-y += -DVEXFS_BUILD_VARIANT=\"standard\"
endif

# Kernel compatibility
ccflags-y += -DLINUX_VERSION_CODE=$(shell echo $(KERNELRELEASE) | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1*65536+\2*256+\3/')

# Module information
ccflags-y += -DMODULE_NAME=\"vexfs\"
ccflags-y += -DMODULE_AUTHOR=\"VexFS\ Contributors\"
ccflags-y += -DMODULE_DESCRIPTION=\"VexFS:\ Vector-Native\ File\ System\"

# Clean targets
clean-files := *.o *.ko *.mod *.mod.c .*.cmd
clean-files += vexfs_rust_combined.o vexfs_rust_safe_ffi_combined.o
clean-files += lib*.a
clean-dirs := .tmp_versions .rust_extract .rust_extract_safe_ffi

# Help target
help:
	@echo "VexFS Kernel Module Build Configuration"
	@echo "======================================"
	@echo ""
	@echo "Build Variants:"
	@echo "  Standard:  make (default - full FFI)"
	@echo "  Safe FFI:  make VEXFS_SAFE_FFI=1"
	@echo "  Safe Mode: make VEXFS_SAFE_MODE=1"
	@echo "  C-Only:    make VEXFS_C_ONLY=1"
	@echo ""
	@echo "Debug Build:"
	@echo "  make VEXFS_DEBUG=1"
	@echo ""
	@echo "Output Files:"
	@echo "  vexfs.ko - Kernel module"
	@echo ""
