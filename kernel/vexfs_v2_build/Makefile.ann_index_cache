# VexFS v2.0 ANN Index Cache System Makefile
# 
# Build system for the ANN Index Caching System that provides specialized
# caching for Approximate Nearest Neighbor (ANN) index structures.

# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99 -D_GNU_SOURCE
LDFLAGS = -pthread -lm

# Debug flags
DEBUG_CFLAGS = -g -DDEBUG -O0 -fsanitize=address -fsanitize=thread
RELEASE_CFLAGS = -O3 -DNDEBUG -march=native

# Test configuration
TEST_CFLAGS = -DTEST_MODE -DNO_NUMA
TEST_LDFLAGS = -pthread -lm

# Source files
HEADER = vexfs_v2_ann_index_cache.h
IMPL = vexfs_v2_ann_index_cache.c
TEST = test_ann_index_cache.c

# Dependencies
DEPS = vexfs_v2_vector_cache.h vexfs_v2_memory_manager.h vexfs_v2_phase3.h

# Output files
TEST_BIN = test_ann_index_cache
KERNEL_OBJ = vexfs_v2_ann_index_cache.o

# Default target
.PHONY: all
all: check-system test

# System capability checking
.PHONY: check-system
check-system:
	@echo "=== ANN Index Cache System Capability Check ==="
	@echo "Checking system capabilities for ANN index caching..."
	@echo "Kernel version: $$(uname -r)"
	@echo "Architecture: $$(uname -m)"
	@echo "Page size: $$(getconf PAGESIZE) bytes"
	@echo "Available memory: $$(free -h | grep '^Mem:' | awk '{print $$2}')"
	@echo "CPU cores: $$(nproc)"
	@echo "CPU cache line size: $$(getconf LEVEL1_DCACHE_LINESIZE 2>/dev/null || echo 64) bytes"
	@if [ -d /sys/devices/system/node ]; then \
		echo "NUMA: available"; \
		echo "NUMA nodes: $$(ls /sys/devices/system/node/node* 2>/dev/null | wc -l)"; \
	else \
		echo "NUMA: not available"; \
	fi
	@echo "Huge pages: $$(cat /proc/meminfo | grep HugePages_Total | awk '{print $$2}')"
	@echo "Transparent huge pages: $$(cat /sys/kernel/mm/transparent_hugepage/enabled 2>/dev/null || echo 'not available')"
	@echo ""
	@echo "Checking compiler capabilities..."
	@$(CC) --version | head -1
	@echo "Checking pthread support..."
	@echo '#include <pthread.h>' | $(CC) -x c -c - -o /dev/null 2>/dev/null && echo "pthread: available" || echo "pthread: not available"
	@echo "Checking atomic operations support..."
	@echo '#include <stdatomic.h>' | $(CC) -x c -c - -o /dev/null 2>/dev/null && echo "atomic: available" || echo "atomic: not available"
	@echo ""

# Build userspace test
.PHONY: test
test: $(TEST_BIN)

$(TEST_BIN): $(TEST) $(HEADER) $(DEPS)
	@echo "Building ANN Index Cache test suite..."
	$(CC) $(CFLAGS) $(TEST_CFLAGS) -I. $(TEST) $(TEST_LDFLAGS) -o $(TEST_BIN)
	@echo "Test suite built successfully: $(TEST_BIN)"

# Build debug version
.PHONY: debug
debug: CFLAGS += $(DEBUG_CFLAGS)
debug: $(TEST_BIN)

# Build release version
.PHONY: release
release: CFLAGS += $(RELEASE_CFLAGS)
release: $(TEST_BIN)

# Build kernel module object (for integration)
.PHONY: kernel
kernel: $(KERNEL_OBJ)

$(KERNEL_OBJ): $(IMPL) $(HEADER) $(DEPS)
	@echo "Building ANN Index Cache kernel object..."
	$(CC) $(CFLAGS) -D__KERNEL__ -I/lib/modules/$$(uname -r)/build/include -c $(IMPL) -o $(KERNEL_OBJ)
	@echo "Kernel object built successfully: $(KERNEL_OBJ)"

# Run tests
.PHONY: run-test
run-test: $(TEST_BIN)
	@echo "=== Running ANN Index Cache Test Suite ==="
	./$(TEST_BIN)

# Run performance benchmarks
.PHONY: benchmark
benchmark: release
	@echo "=== Running ANN Index Cache Performance Benchmarks ==="
	@echo "Running single-threaded benchmark..."
	./$(TEST_BIN) --benchmark --threads=1
	@echo ""
	@echo "Running multi-threaded benchmark..."
	./$(TEST_BIN) --benchmark --threads=$$(nproc)
	@echo ""
	@echo "Running stress test..."
	./$(TEST_BIN) --stress --duration=60

# Run memory leak detection
.PHONY: memcheck
memcheck: debug
	@echo "=== Running Memory Leak Detection ==="
	@if command -v valgrind >/dev/null 2>&1; then \
		valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
		--track-origins=yes --verbose ./$(TEST_BIN); \
	else \
		echo "Valgrind not available, running with AddressSanitizer..."; \
		./$(TEST_BIN); \
	fi

# Run thread safety analysis
.PHONY: threadcheck
threadcheck: debug
	@echo "=== Running Thread Safety Analysis ==="
	@if command -v valgrind >/dev/null 2>&1; then \
		valgrind --tool=helgrind --verbose ./$(TEST_BIN); \
	else \
		echo "Valgrind not available, running with ThreadSanitizer..."; \
		./$(TEST_BIN); \
	fi

# Performance profiling
.PHONY: profile
profile: release
	@echo "=== Running Performance Profiling ==="
	@if command -v perf >/dev/null 2>&1; then \
		perf record -g ./$(TEST_BIN) --benchmark; \
		perf report; \
	else \
		echo "perf not available, running basic timing..."; \
		time ./$(TEST_BIN) --benchmark; \
	fi

# Cache analysis
.PHONY: cache-analysis
cache-analysis: release
	@echo "=== Running Cache Performance Analysis ==="
	@if command -v perf >/dev/null 2>&1; then \
		perf stat -e cache-references,cache-misses,L1-dcache-loads,L1-dcache-load-misses \
		./$(TEST_BIN) --benchmark; \
	else \
		echo "perf not available, running basic cache test..."; \
		./$(TEST_BIN) --cache-test; \
	fi

# NUMA analysis
.PHONY: numa-analysis
numa-analysis: release
	@echo "=== Running NUMA Performance Analysis ==="
	@if [ -d /sys/devices/system/node ] && command -v numactl >/dev/null 2>&1; then \
		echo "Testing NUMA-local allocation..."; \
		numactl --cpunodebind=0 --membind=0 ./$(TEST_BIN) --numa-test; \
		echo "Testing NUMA-remote allocation..."; \
		numactl --cpunodebind=0 --membind=1 ./$(TEST_BIN) --numa-test; \
	else \
		echo "NUMA not available or numactl not installed"; \
	fi

# Stress testing
.PHONY: stress
stress: release
	@echo "=== Running Stress Tests ==="
	@echo "Running high-concurrency stress test..."
	./$(TEST_BIN) --stress --threads=$$(( $$(nproc) * 2 )) --duration=300
	@echo ""
	@echo "Running memory pressure stress test..."
	./$(TEST_BIN) --stress --memory-pressure --duration=180
	@echo ""
	@echo "Running cache thrashing stress test..."
	./$(TEST_BIN) --stress --cache-thrash --duration=120

# Integration testing
.PHONY: integration
integration: test
	@echo "=== Running Integration Tests ==="
	@echo "Testing integration with vector cache..."
	./$(TEST_BIN) --integration --vector-cache
	@echo ""
	@echo "Testing integration with memory manager..."
	./$(TEST_BIN) --integration --memory-manager
	@echo ""
	@echo "Testing integration with HNSW index..."
	./$(TEST_BIN) --integration --hnsw-index

# Code coverage analysis
.PHONY: coverage
coverage:
	@echo "=== Running Code Coverage Analysis ==="
	$(CC) $(CFLAGS) $(TEST_CFLAGS) --coverage -I. $(TEST) $(TEST_LDFLAGS) -o $(TEST_BIN)_coverage
	./$(TEST_BIN)_coverage
	@if command -v gcov >/dev/null 2>&1; then \
		gcov $(TEST); \
		echo "Coverage report generated"; \
	else \
		echo "gcov not available"; \
	fi

# Static analysis
.PHONY: static-analysis
static-analysis:
	@echo "=== Running Static Analysis ==="
	@if command -v cppcheck >/dev/null 2>&1; then \
		cppcheck --enable=all --std=c99 --platform=unix64 \
		--suppress=missingIncludeSystem $(IMPL) $(TEST); \
	else \
		echo "cppcheck not available"; \
	fi
	@if command -v clang-tidy >/dev/null 2>&1; then \
		clang-tidy $(IMPL) $(TEST) -- $(CFLAGS) $(TEST_CFLAGS) -I.; \
	else \
		echo "clang-tidy not available"; \
	fi

# Documentation generation
.PHONY: docs
docs:
	@echo "=== Generating Documentation ==="
	@if command -v doxygen >/dev/null 2>&1; then \
		doxygen Doxyfile 2>/dev/null || echo "Doxyfile not found, skipping doxygen"; \
	else \
		echo "doxygen not available"; \
	fi
	@echo "Generating header documentation..."
	@grep -E "^/\*\*|^ \*|^ \*/" $(HEADER) > ann_index_cache_api.txt || true

# Clean build artifacts
.PHONY: clean
clean:
	@echo "Cleaning ANN Index Cache build artifacts..."
	rm -f $(TEST_BIN) $(TEST_BIN)_coverage $(KERNEL_OBJ)
	rm -f *.o *.gcno *.gcda *.gcov
	rm -f core core.*
	rm -f ann_index_cache_api.txt
	rm -rf html/ latex/
	@echo "Clean completed"

# Install (for system-wide installation)
.PHONY: install
install: $(TEST_BIN)
	@echo "Installing ANN Index Cache test suite..."
	install -d $(DESTDIR)/usr/local/bin
	install -m 755 $(TEST_BIN) $(DESTDIR)/usr/local/bin/
	install -d $(DESTDIR)/usr/local/include/vexfs
	install -m 644 $(HEADER) $(DESTDIR)/usr/local/include/vexfs/
	@echo "Installation completed"

# Uninstall
.PHONY: uninstall
uninstall:
	@echo "Uninstalling ANN Index Cache test suite..."
	rm -f $(DESTDIR)/usr/local/bin/$(TEST_BIN)
	rm -f $(DESTDIR)/usr/local/include/vexfs/$(HEADER)
	@echo "Uninstallation completed"

# Help target
.PHONY: help
help:
	@echo "VexFS v2.0 ANN Index Cache System Makefile"
	@echo "==========================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Build everything (default)"
	@echo "  check-system     - Check system capabilities"
	@echo "  test             - Build test suite"
	@echo "  debug            - Build debug version"
	@echo "  release          - Build optimized release version"
	@echo "  kernel           - Build kernel module object"
	@echo ""
	@echo "Testing targets:"
	@echo "  run-test         - Run basic test suite"
	@echo "  benchmark        - Run performance benchmarks"
	@echo "  memcheck         - Run memory leak detection"
	@echo "  threadcheck      - Run thread safety analysis"
	@echo "  profile          - Run performance profiling"
	@echo "  cache-analysis   - Run cache performance analysis"
	@echo "  numa-analysis    - Run NUMA performance analysis"
	@echo "  stress           - Run stress tests"
	@echo "  integration      - Run integration tests"
	@echo "  coverage         - Run code coverage analysis"
	@echo "  static-analysis  - Run static code analysis"
	@echo ""
	@echo "Utility targets:"
	@echo "  docs             - Generate documentation"
	@echo "  clean            - Clean build artifacts"
	@echo "  install          - Install system-wide"
	@echo "  uninstall        - Uninstall system-wide"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Examples:"
	@echo "  make test        - Build and prepare test suite"
	@echo "  make run-test    - Run all tests"
	@echo "  make benchmark   - Run performance benchmarks"
	@echo "  make stress      - Run comprehensive stress tests"

# Dependency tracking
$(TEST_BIN): $(DEPS)
$(KERNEL_OBJ): $(DEPS)

# Phony targets
.PHONY: all check-system test debug release kernel run-test benchmark memcheck threadcheck profile cache-analysis numa-analysis stress integration coverage static-analysis docs clean install uninstall help