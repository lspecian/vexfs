# VexFS v2.0 Infrastructure Breakthrough Comparison Test Suite Makefile
#
# This Makefile builds all the comparison and validation tests that demonstrate
# the infrastructure breakthrough achieved in VexFS v2.0 IOCTL interface.
#
# Copyright (C) 2024 VexFS Development Team
# Licensed under GPL v2

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -O2 -g
LDFLAGS = -lm

# Test programs
COMPARISON_TESTS = before_after_comparison_test regression_prevention_test
BROKEN_TESTS = simple_vector_test block_device_test
FIXED_TESTS = final_corrected_vector_test debug_vector_test corrected_vector_test_fixed
DIAGNOSTIC_TESTS = check_ioctl_numbers test_uapi_sizes test_with_uapi_header
PERFORMANCE_TESTS = vexfs_v2_performance_validator

ALL_TESTS = $(COMPARISON_TESTS) $(BROKEN_TESTS) $(FIXED_TESTS) $(DIAGNOSTIC_TESTS) $(PERFORMANCE_TESTS)

# Default target
all: $(ALL_TESTS)
	@echo "‚úÖ All VexFS v2.0 comparison tests built successfully"
	@echo ""
	@echo "üìä Available test categories:"
	@echo "  ‚Ä¢ Comparison Tests: $(COMPARISON_TESTS)"
	@echo "  ‚Ä¢ Broken Tests (Before): $(BROKEN_TESTS)"
	@echo "  ‚Ä¢ Fixed Tests (After): $(FIXED_TESTS)"
	@echo "  ‚Ä¢ Diagnostic Tests: $(DIAGNOSTIC_TESTS)"
	@echo "  ‚Ä¢ Performance Tests: $(PERFORMANCE_TESTS)"

# Comparison and analysis tests
comparison_tests: $(COMPARISON_TESTS)
	@echo "‚úÖ Comparison tests built: $(COMPARISON_TESTS)"

before_after_comparison_test: before_after_comparison_test.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

regression_prevention_test: regression_prevention_test.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

# Broken tests (demonstrate the original problems)
broken_tests: $(BROKEN_TESTS)
	@echo "‚ö†Ô∏è  Broken tests built (for demonstration): $(BROKEN_TESTS)"

simple_vector_test: simple_vector_test.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

block_device_test: block_device_test.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

# Fixed tests (demonstrate the solutions)
fixed_tests: $(FIXED_TESTS)
	@echo "‚úÖ Fixed tests built: $(FIXED_TESTS)"

final_corrected_vector_test: final_corrected_vector_test.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

debug_vector_test: debug_vector_test.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

corrected_vector_test_fixed: corrected_vector_test_fixed.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

# Diagnostic tests
diagnostic_tests: $(DIAGNOSTIC_TESTS)
	@echo "üîç Diagnostic tests built: $(DIAGNOSTIC_TESTS)"

check_ioctl_numbers: check_ioctl_numbers.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

test_uapi_sizes: test_uapi_sizes.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

test_with_uapi_header: test_with_uapi_header.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

# Performance tests
performance_tests: $(PERFORMANCE_TESTS)
	@echo "‚ö° Performance tests built: $(PERFORMANCE_TESTS)"

vexfs_v2_performance_validator: vexfs_v2_performance_validator.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

# Test execution targets
run_comparison: before_after_comparison_test
	@echo "üß™ Running infrastructure breakthrough comparison analysis..."
	./before_after_comparison_test

run_regression_test: regression_prevention_test
	@echo "üõ°Ô∏è  Running regression prevention test suite..."
	./regression_prevention_test

run_diagnostic: $(DIAGNOSTIC_TESTS)
	@echo "üîç Running diagnostic tests..."
	@echo "--- IOCTL Command Numbers ---"
	./check_ioctl_numbers
	@echo ""
	@echo "--- UAPI Structure Sizes ---"
	./test_uapi_sizes
	@echo ""
	@echo "--- UAPI Header Test ---"
	./test_with_uapi_header

run_broken_demo: $(BROKEN_TESTS)
	@echo "‚ö†Ô∏è  Demonstrating broken tests (these should fail)..."
	@echo "--- Simple Vector Test (Broken) ---"
	-./simple_vector_test 2>/dev/null || echo "‚ùå Failed as expected (broken structure)"
	@echo ""
	@echo "--- Block Device Test (Broken) ---"
	-./block_device_test 2>/dev/null || echo "‚ùå Failed as expected (broken structure)"

run_fixed_demo: $(FIXED_TESTS)
	@echo "‚úÖ Demonstrating fixed tests (these should work)..."
	@echo "--- Final Corrected Vector Test ---"
	./final_corrected_vector_test
	@echo ""
	@echo "--- Debug Vector Test ---"
	./debug_vector_test

# Full demonstration of the breakthrough
demo_breakthrough: all
	@echo "üéâ VexFS v2.0 Infrastructure Breakthrough Demonstration"
	@echo "======================================================"
	@echo ""
	@echo "üìä Step 1: Analyzing the breakthrough..."
	@$(MAKE) -f Makefile.comparison_tests run_comparison
	@echo ""
	@echo "üõ°Ô∏è  Step 2: Validating regression prevention..."
	@$(MAKE) -f Makefile.comparison_tests run_regression_test
	@echo ""
	@echo "üîç Step 3: Running diagnostic validation..."
	@$(MAKE) -f Makefile.comparison_tests run_diagnostic
	@echo ""
	@echo "üéØ Infrastructure breakthrough demonstration complete!"

# Validation targets
validate_uapi: test_uapi_sizes
	@echo "üîç Validating UAPI header consistency..."
	./test_uapi_sizes
	@if [ $$? -eq 0 ]; then \
		echo "‚úÖ UAPI header validation passed"; \
	else \
		echo "‚ùå UAPI header validation failed"; \
		exit 1; \
	fi

validate_regression: regression_prevention_test
	@echo "üõ°Ô∏è  Validating regression prevention..."
	./regression_prevention_test
	@if [ $$? -eq 0 ]; then \
		echo "‚úÖ No regressions detected"; \
	else \
		echo "‚ùå REGRESSION DETECTED - Fix required!"; \
		exit 1; \
	fi

# Continuous integration target
ci_test: all validate_uapi validate_regression
	@echo "üöÄ All CI tests passed - Infrastructure breakthrough validated!"

# Clean targets
clean:
	rm -f $(ALL_TESTS)
	@echo "üßπ Cleaned all test binaries"

clean_broken:
	rm -f $(BROKEN_TESTS)
	@echo "üßπ Cleaned broken test binaries"

clean_fixed:
	rm -f $(FIXED_TESTS)
	@echo "üßπ Cleaned fixed test binaries"

# Help target
help:
	@echo "VexFS v2.0 Infrastructure Breakthrough Test Suite"
	@echo "================================================"
	@echo ""
	@echo "Build targets:"
	@echo "  all                    - Build all tests"
	@echo "  comparison_tests       - Build comparison and analysis tests"
	@echo "  broken_tests          - Build broken tests (for demonstration)"
	@echo "  fixed_tests           - Build fixed tests (working versions)"
	@echo "  diagnostic_tests      - Build diagnostic and validation tests"
	@echo "  performance_tests     - Build performance validation tests"
	@echo ""
	@echo "Execution targets:"
	@echo "  run_comparison        - Run breakthrough comparison analysis"
	@echo "  run_regression_test   - Run regression prevention test suite"
	@echo "  run_diagnostic        - Run diagnostic tests"
	@echo "  run_broken_demo       - Demonstrate broken tests (should fail)"
	@echo "  run_fixed_demo        - Demonstrate fixed tests (should work)"
	@echo "  demo_breakthrough     - Full breakthrough demonstration"
	@echo ""
	@echo "Validation targets:"
	@echo "  validate_uapi         - Validate UAPI header consistency"
	@echo "  validate_regression   - Check for regressions"
	@echo "  ci_test              - Run all CI validation tests"
	@echo ""
	@echo "Utility targets:"
	@echo "  clean                 - Remove all test binaries"
	@echo "  clean_broken          - Remove broken test binaries"
	@echo "  clean_fixed           - Remove fixed test binaries"
	@echo "  help                  - Show this help message"

# Dependencies
$(ALL_TESTS): Makefile.comparison_tests

# Tests that depend on UAPI header
final_corrected_vector_test test_with_uapi_header test_uapi_sizes: vexfs_v2_uapi.h
before_after_comparison_test regression_prevention_test: vexfs_v2_uapi.h
vexfs_v2_performance_validator: vexfs_v2_uapi.h

.PHONY: all comparison_tests broken_tests fixed_tests diagnostic_tests performance_tests
.PHONY: run_comparison run_regression_test run_diagnostic run_broken_demo run_fixed_demo
.PHONY: demo_breakthrough validate_uapi validate_regression ci_test
.PHONY: clean clean_broken clean_fixed help