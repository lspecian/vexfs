# VexFS v2.0 Enhanced ioctl Interface Makefile
#
# This Makefile builds the enhanced ioctl interface components including
# the main implementation, utility functions, and test suite.

# Compiler settings
CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99
KERNEL_CFLAGS = -DKERNEL_BUILD -I/lib/modules/$(shell uname -r)/build/include

# Source files
ENHANCED_IOCTL_SOURCES = \
	vexfs_v2_enhanced_ioctl.c \
	vexfs_v2_enhanced_ioctl_part2.c \
	vexfs_v2_enhanced_ioctl_utils.c

# Header files
ENHANCED_IOCTL_HEADERS = \
	vexfs_v2_enhanced_ioctl.h \
	vexfs_v2_uapi.h \
	vexfs_v2_phase3.h \
	vexfs_v2_search.h

# Test files
TEST_SOURCES = test_enhanced_ioctl.c
TEST_BINARY = test_enhanced_ioctl

# Object files
ENHANCED_IOCTL_OBJECTS = $(ENHANCED_IOCTL_SOURCES:.c=.o)

# Default target
all: enhanced_ioctl test_suite

# Build enhanced ioctl interface (for kernel module)
enhanced_ioctl: $(ENHANCED_IOCTL_OBJECTS)
	@echo "‚úÖ Enhanced ioctl interface compiled successfully"

# Compile enhanced ioctl source files
%.o: %.c $(ENHANCED_IOCTL_HEADERS)
	@echo "üî® Compiling $<"
	$(CC) $(CFLAGS) $(KERNEL_CFLAGS) -c $< -o $@

# Build test suite
test_suite: $(TEST_BINARY)

$(TEST_BINARY): $(TEST_SOURCES) vexfs_v2_enhanced_ioctl.h
	@echo "üî® Building test suite"
	$(CC) $(CFLAGS) -DUSERSPACE_BUILD -o $(TEST_BINARY) $(TEST_SOURCES) -lm

# Run tests
test: $(TEST_BINARY)
	@echo "üß™ Running enhanced ioctl test suite"
	./$(TEST_BINARY)

# Check syntax and style
check:
	@echo "üîç Checking code style and syntax"
	@for file in $(ENHANCED_IOCTL_SOURCES) $(TEST_SOURCES); do \
		echo "Checking $$file..."; \
		$(CC) $(CFLAGS) -fsyntax-only $$file 2>/dev/null || echo "‚ö†Ô∏è  Syntax issues in $$file"; \
	done

# Generate documentation
docs:
	@echo "üìö Generating documentation"
	@echo "Enhanced ioctl Interface Documentation" > enhanced_ioctl_docs.txt
	@echo "=====================================" >> enhanced_ioctl_docs.txt
	@echo "" >> enhanced_ioctl_docs.txt
	@echo "Source Files:" >> enhanced_ioctl_docs.txt
	@for file in $(ENHANCED_IOCTL_SOURCES); do \
		echo "  - $$file" >> enhanced_ioctl_docs.txt; \
	done
	@echo "" >> enhanced_ioctl_docs.txt
	@echo "Header Files:" >> enhanced_ioctl_docs.txt
	@for file in $(ENHANCED_IOCTL_HEADERS); do \
		echo "  - $$file" >> enhanced_ioctl_docs.txt; \
	done
	@echo "" >> enhanced_ioctl_docs.txt
	@echo "Test Files:" >> enhanced_ioctl_docs.txt
	@for file in $(TEST_SOURCES); do \
		echo "  - $$file" >> enhanced_ioctl_docs.txt; \
	done
	@echo "üìÑ Documentation generated: enhanced_ioctl_docs.txt"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts"
	rm -f $(ENHANCED_IOCTL_OBJECTS)
	rm -f $(TEST_BINARY)
	rm -f enhanced_ioctl_docs.txt
	rm -f *.tmp

# Install test binary
install: $(TEST_BINARY)
	@echo "üì¶ Installing test binary"
	sudo cp $(TEST_BINARY) /usr/local/bin/
	sudo chmod +x /usr/local/bin/$(TEST_BINARY)
	@echo "‚úÖ Test binary installed to /usr/local/bin/$(TEST_BINARY)"

# Uninstall test binary
uninstall:
	@echo "üóëÔ∏è  Uninstalling test binary"
	sudo rm -f /usr/local/bin/$(TEST_BINARY)
	@echo "‚úÖ Test binary uninstalled"

# Show help
help:
	@echo "VexFS v2.0 Enhanced ioctl Interface Build System"
	@echo "================================================"
	@echo ""
	@echo "Available targets:"
	@echo "  all           - Build enhanced ioctl interface and test suite"
	@echo "  enhanced_ioctl- Build enhanced ioctl interface only"
	@echo "  test_suite    - Build test suite only"
	@echo "  test          - Build and run test suite"
	@echo "  check         - Check code syntax and style"
	@echo "  docs          - Generate documentation"
	@echo "  clean         - Clean build artifacts"
	@echo "  install       - Install test binary to system"
	@echo "  uninstall     - Remove test binary from system"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Example usage:"
	@echo "  make all      - Build everything"
	@echo "  make test     - Run tests"
	@echo "  make clean    - Clean up"

# Show build status
status:
	@echo "üìä Build Status"
	@echo "==============="
	@echo "Source files:"
	@for file in $(ENHANCED_IOCTL_SOURCES); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file (missing)"; \
		fi; \
	done
	@echo "Header files:"
	@for file in $(ENHANCED_IOCTL_HEADERS); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file (missing)"; \
		fi; \
	done
	@echo "Test files:"
	@for file in $(TEST_SOURCES); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file (missing)"; \
		fi; \
	done
	@echo "Build artifacts:"
	@if [ -f "$(TEST_BINARY)" ]; then \
		echo "  ‚úÖ $(TEST_BINARY)"; \
	else \
		echo "  ‚ùå $(TEST_BINARY) (not built)"; \
	fi

# Benchmark target
benchmark: $(TEST_BINARY)
	@echo "‚ö° Running performance benchmarks"
	@echo "================================="
	./$(TEST_BINARY) 2>&1 | grep "üìä"

# Memory check (requires valgrind)
memcheck: $(TEST_BINARY)
	@echo "üîç Running memory check"
	@if command -v valgrind >/dev/null 2>&1; then \
		valgrind --leak-check=full --show-leak-kinds=all ./$(TEST_BINARY); \
	else \
		echo "‚ö†Ô∏è  valgrind not found, skipping memory check"; \
	fi

# Code coverage (requires gcov)
coverage: CFLAGS += --coverage
coverage: clean $(TEST_BINARY)
	@echo "üìà Generating code coverage report"
	./$(TEST_BINARY)
	@if command -v gcov >/dev/null 2>&1; then \
		gcov $(TEST_SOURCES); \
		echo "‚úÖ Coverage report generated"; \
	else \
		echo "‚ö†Ô∏è  gcov not found, skipping coverage report"; \
	fi

# Static analysis (requires cppcheck)
analyze:
	@echo "üî¨ Running static analysis"
	@if command -v cppcheck >/dev/null 2>&1; then \
		cppcheck --enable=all --std=c99 $(ENHANCED_IOCTL_SOURCES) $(TEST_SOURCES); \
	else \
		echo "‚ö†Ô∏è  cppcheck not found, skipping static analysis"; \
	fi

# Format code (requires clang-format)
format:
	@echo "üé® Formatting code"
	@if command -v clang-format >/dev/null 2>&1; then \
		for file in $(ENHANCED_IOCTL_SOURCES) $(TEST_SOURCES); do \
			echo "Formatting $$file..."; \
			clang-format -i $$file; \
		done; \
		echo "‚úÖ Code formatted"; \
	else \
		echo "‚ö†Ô∏è  clang-format not found, skipping code formatting"; \
	fi

# Package for distribution
package: clean all docs
	@echo "üì¶ Creating distribution package"
	@mkdir -p vexfs_enhanced_ioctl_package
	@cp $(ENHANCED_IOCTL_SOURCES) vexfs_enhanced_ioctl_package/
	@cp $(ENHANCED_IOCTL_HEADERS) vexfs_enhanced_ioctl_package/
	@cp $(TEST_SOURCES) vexfs_enhanced_ioctl_package/
	@cp $(TEST_BINARY) vexfs_enhanced_ioctl_package/
	@cp Makefile.enhanced_ioctl vexfs_enhanced_ioctl_package/Makefile
	@cp enhanced_ioctl_docs.txt vexfs_enhanced_ioctl_package/
	@tar -czf vexfs_enhanced_ioctl.tar.gz vexfs_enhanced_ioctl_package/
	@rm -rf vexfs_enhanced_ioctl_package/
	@echo "‚úÖ Package created: vexfs_enhanced_ioctl.tar.gz"

# Declare phony targets
.PHONY: all enhanced_ioctl test_suite test check docs clean install uninstall help status benchmark memcheck coverage analyze format package

# Default goal
.DEFAULT_GOAL := all