# VexFS v2.0 Memory Manager Makefile
#
# This Makefile builds the memory manager test program and related utilities
# for testing the VexFS optimized memory management system.

CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99 -D_GNU_SOURCE
LDFLAGS = -pthread -lm
INCLUDES = -I.

# Optional NUMA support (if available)
NUMA_AVAILABLE := $(shell pkg-config --exists libnuma && echo yes || echo no)
ifeq ($(NUMA_AVAILABLE),yes)
    CFLAGS += -DHAVE_NUMA
    LDFLAGS += -lnuma
else
    CFLAGS += -DNO_NUMA
endif

# Test programs
TEST_PROGS = test_memory_manager

# Source files
TEST_MEMORY_MANAGER_SRCS = test_memory_manager.c

# Object files
TEST_MEMORY_MANAGER_OBJS = $(TEST_MEMORY_MANAGER_SRCS:.c=.o)

# Default target
all: $(TEST_PROGS)

# Test memory manager program
test_memory_manager: $(TEST_MEMORY_MANAGER_OBJS)
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

# Object file compilation
%.o: %.c vexfs_v2_uapi.h
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<

# Clean target
clean:
	rm -f $(TEST_PROGS) *.o

# Install target (copy to system test directory)
install: $(TEST_PROGS)
	mkdir -p /usr/local/bin/vexfs_tests
	cp $(TEST_PROGS) /usr/local/bin/vexfs_tests/
	chmod +x /usr/local/bin/vexfs_tests/*

# Test target (run all tests)
test: $(TEST_PROGS)
	@echo "=== Running VexFS Memory Manager Tests ==="
	@echo "Checking system requirements..."
	@echo "  Available memory: $$(free -h | grep '^Mem:' | awk '{print $$2}')"
	@echo "  CPU cores: $$(nproc)"
	@if [ "$(NUMA_AVAILABLE)" = "yes" ]; then \
		echo "  NUMA support: enabled"; \
		echo "  NUMA nodes: $$(numactl --hardware | grep 'available:' | awk '{print $$2}')"; \
	else \
		echo "  NUMA support: disabled"; \
	fi
	@echo ""
	./test_memory_manager

# Debug target (run with gdb)
debug: $(TEST_PROGS)
	gdb ./test_memory_manager

# Valgrind target (memory leak detection)
valgrind: $(TEST_PROGS)
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./test_memory_manager

# Performance target (run with perf)
perf: $(TEST_PROGS)
	perf record -g ./test_memory_manager
	perf report

# Stress test target (extended testing)
stress: $(TEST_PROGS)
	@echo "Running stress test (this may take several minutes)..."
	@for i in $$(seq 1 10); do \
		echo "Stress test iteration $$i/10"; \
		./test_memory_manager || exit 1; \
	done
	@echo "Stress test completed successfully"

# Memory usage monitoring
monitor: $(TEST_PROGS)
	@echo "Starting memory usage monitoring..."
	@(while true; do \
		echo "$$(date): Memory usage: $$(free -h | grep '^Mem:' | awk '{print $$3 "/" $$2}')"; \
		sleep 1; \
	done) &
	@MONITOR_PID=$$!; \
	./test_memory_manager; \
	kill $$MONITOR_PID

# Check system capabilities
check-system:
	@echo "=== System Capability Check ==="
	@echo "Kernel version: $$(uname -r)"
	@echo "Architecture: $$(uname -m)"
	@echo "Page size: $$(getconf PAGESIZE) bytes"
	@echo "Available memory: $$(free -h | grep '^Mem:' | awk '{print $$2}')"
	@echo "CPU cores: $$(nproc)"
	@echo "CPU cache line size: $$(getconf LEVEL1_DCACHE_LINESIZE 2>/dev/null || echo 'unknown') bytes"
	@if [ "$(NUMA_AVAILABLE)" = "yes" ]; then \
		echo "NUMA nodes: $$(numactl --hardware | grep 'available:' | awk '{print $$2}')"; \
		numactl --hardware | grep 'node.*cpus:' | head -4; \
	else \
		echo "NUMA: not available"; \
	fi
	@echo "Huge pages: $$(cat /proc/meminfo | grep HugePages_Total | awk '{print $$2}')"
	@echo "Transparent huge pages: $$(cat /sys/kernel/mm/transparent_hugepage/enabled 2>/dev/null || echo 'not available')"

# Benchmark target (performance comparison)
benchmark: $(TEST_PROGS)
	@echo "=== Memory Manager Benchmark ==="
	@echo "Running baseline malloc/free benchmark..."
	@time -p sh -c 'for i in $$(seq 1 10000); do \
		ptr=$$(mktemp); rm $$ptr; \
	done' 2>&1 | grep real | awk '{print "Baseline time: " $$2 " seconds"}'
	@echo ""
	@echo "Running VexFS memory manager benchmark..."
	@time -p ./test_memory_manager 2>&1 | grep real | awk '{print "VexFS time: " $$2 " seconds"}'

# Help target
help:
	@echo "VexFS Memory Manager Test Makefile"
	@echo ""
	@echo "Targets:"
	@echo "  all           - Build all test programs (default)"
	@echo "  clean         - Remove built files"
	@echo "  install       - Install test programs to system directory"
	@echo "  test          - Run memory manager tests"
	@echo "  debug         - Run tests with gdb debugger"
	@echo "  valgrind      - Run tests with valgrind memory checker"
	@echo "  perf          - Run tests with perf profiler"
	@echo "  stress        - Run extended stress tests"
	@echo "  monitor       - Run tests with memory usage monitoring"
	@echo "  check-system  - Check system capabilities"
	@echo "  benchmark     - Run performance benchmarks"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Configuration:"
	@echo "  NUMA support: $(NUMA_AVAILABLE)"
	@echo "  Compiler: $(CC)"
	@echo "  Flags: $(CFLAGS)"
	@echo ""
	@echo "Prerequisites:"
	@echo "  - GCC compiler"
	@echo "  - pthread library"
	@echo "  - math library (libm)"
	@if [ "$(NUMA_AVAILABLE)" = "yes" ]; then \
		echo "  - NUMA library (libnuma) - detected"; \
	else \
		echo "  - NUMA library (libnuma) - not available"; \
	fi

.PHONY: all clean install test debug valgrind perf stress monitor check-system benchmark help