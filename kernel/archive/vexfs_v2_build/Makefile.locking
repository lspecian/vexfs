# VexFS v2.0 Fine-Grained Locking System Makefile
#
# This Makefile builds the fine-grained locking system components including
# the main implementation, RCU algorithms, deadlock detection, and test suite.

# Compiler settings
CC = gcc
CXX = g++
CFLAGS = -Wall -Wextra -O2 -std=c99
CXXFLAGS = -Wall -Wextra -O2 -std=c++17
KERNEL_CFLAGS = -DKERNEL_BUILD -I/lib/modules/$(shell uname -r)/build/include

# Source files
LOCKING_SOURCES = \
	vexfs_v2_locking.c \
	vexfs_v2_locking_rcu.c \
	vexfs_v2_locking_deadlock.c

# Header files
LOCKING_HEADERS = \
	vexfs_v2_locking.h

# Test files
TEST_SOURCES = test_vexfs_locking.c
TEST_BINARY = test_vexfs_locking

# Object files
LOCKING_OBJECTS = $(LOCKING_SOURCES:.c=.o)

# Default target
all: locking_system test_suite

# Build locking system (for kernel module)
locking_system: $(LOCKING_OBJECTS)
	@echo "‚úÖ Fine-grained locking system compiled successfully"

# Compile locking source files
%.o: %.c $(LOCKING_HEADERS)
	@echo "üî® Compiling $<"
	$(CC) $(CFLAGS) $(KERNEL_CFLAGS) -c $< -o $@

# Build test suite
test_suite: $(TEST_BINARY)

$(TEST_BINARY): $(TEST_SOURCES)
	@echo "üî® Building locking test suite"
	$(CXX) $(CXXFLAGS) -DUSERSPACE_BUILD -o $(TEST_BINARY) $(TEST_SOURCES) -lpthread

# Run tests
test: $(TEST_BINARY)
	@echo "üß™ Running fine-grained locking test suite"
	./$(TEST_BINARY)

# Run performance benchmarks
benchmark: $(TEST_BINARY)
	@echo "‚ö° Running locking performance benchmarks"
	@echo "================================="
	./$(TEST_BINARY) 2>&1 | grep "üìä"

# Check syntax and style
check:
	@echo "üîç Checking code style and syntax"
	@for file in $(LOCKING_SOURCES); do \
		echo "Checking $$file..."; \
		$(CC) $(CFLAGS) -fsyntax-only $$file 2>/dev/null || echo "‚ö†Ô∏è  Syntax issues in $$file"; \
	done
	@echo "Checking $(TEST_SOURCES)..."
	@$(CXX) $(CXXFLAGS) -fsyntax-only $(TEST_SOURCES) 2>/dev/null || echo "‚ö†Ô∏è  Syntax issues in $(TEST_SOURCES)"

# Generate documentation
docs:
	@echo "üìö Generating locking system documentation"
	@echo "Fine-Grained Locking System Documentation" > locking_docs.txt
	@echo "=========================================" >> locking_docs.txt
	@echo "" >> locking_docs.txt
	@echo "Components:" >> locking_docs.txt
	@echo "  - Per-vector reader/writer locks using rwsem" >> locking_docs.txt
	@echo "  - RCU for read-mostly index structures" >> locking_docs.txt
	@echo "  - Lock-free algorithms for high-contention operations" >> locking_docs.txt
	@echo "  - NUMA-aware synchronization primitives" >> locking_docs.txt
	@echo "  - Deadlock detection and prevention mechanisms" >> locking_docs.txt
	@echo "" >> locking_docs.txt
	@echo "Source Files:" >> locking_docs.txt
	@for file in $(LOCKING_SOURCES); do \
		echo "  - $$file" >> locking_docs.txt; \
	done
	@echo "" >> locking_docs.txt
	@echo "Header Files:" >> locking_docs.txt
	@for file in $(LOCKING_HEADERS); do \
		echo "  - $$file" >> locking_docs.txt; \
	done
	@echo "" >> locking_docs.txt
	@echo "Test Files:" >> locking_docs.txt
	@echo "  - $(TEST_SOURCES)" >> locking_docs.txt
	@echo "üìÑ Documentation generated: locking_docs.txt"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning locking system build artifacts"
	rm -f $(LOCKING_OBJECTS)
	rm -f $(TEST_BINARY)
	rm -f locking_docs.txt
	rm -f *.tmp

# Install test binary
install: $(TEST_BINARY)
	@echo "üì¶ Installing locking test binary"
	sudo cp $(TEST_BINARY) /usr/local/bin/
	sudo chmod +x /usr/local/bin/$(TEST_BINARY)
	@echo "‚úÖ Test binary installed to /usr/local/bin/$(TEST_BINARY)"

# Uninstall test binary
uninstall:
	@echo "üóëÔ∏è  Uninstalling locking test binary"
	sudo rm -f /usr/local/bin/$(TEST_BINARY)
	@echo "‚úÖ Test binary uninstalled"

# Show help
help:
	@echo "VexFS v2.0 Fine-Grained Locking System Build System"
	@echo "==================================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all           - Build locking system and test suite"
	@echo "  locking_system- Build locking system only"
	@echo "  test_suite    - Build test suite only"
	@echo "  test          - Build and run test suite"
	@echo "  benchmark     - Run performance benchmarks"
	@echo "  check         - Check code syntax and style"
	@echo "  docs          - Generate documentation"
	@echo "  clean         - Clean build artifacts"
	@echo "  install       - Install test binary to system"
	@echo "  uninstall     - Remove test binary from system"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Example usage:"
	@echo "  make all      - Build everything"
	@echo "  make test     - Run tests"
	@echo "  make benchmark- Run performance tests"
	@echo "  make clean    - Clean up"

# Show build status
status:
	@echo "üìä Locking System Build Status"
	@echo "==============================="
	@echo "Source files:"
	@for file in $(LOCKING_SOURCES); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file (missing)"; \
		fi; \
	done
	@echo "Header files:"
	@for file in $(LOCKING_HEADERS); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file (missing)"; \
		fi; \
	done
	@echo "Test files:"
	@if [ -f "$(TEST_SOURCES)" ]; then \
		echo "  ‚úÖ $(TEST_SOURCES)"; \
	else \
		echo "  ‚ùå $(TEST_SOURCES) (missing)"; \
	fi
	@echo "Build artifacts:"
	@if [ -f "$(TEST_BINARY)" ]; then \
		echo "  ‚úÖ $(TEST_BINARY)"; \
	else \
		echo "  ‚ùå $(TEST_BINARY) (not built)"; \
	fi

# Memory check (requires valgrind)
memcheck: $(TEST_BINARY)
	@echo "üîç Running memory check on locking tests"
	@if command -v valgrind >/dev/null 2>&1; then \
		valgrind --leak-check=full --show-leak-kinds=all ./$(TEST_BINARY); \
	else \
		echo "‚ö†Ô∏è  valgrind not found, skipping memory check"; \
	fi

# Thread safety analysis (requires clang)
thread_check:
	@echo "üîí Running thread safety analysis"
	@if command -v clang >/dev/null 2>&1; then \
		for file in $(LOCKING_SOURCES); do \
			echo "Analyzing $$file..."; \
			clang -Wthread-safety -fsyntax-only $$file 2>/dev/null || echo "‚ö†Ô∏è  Thread safety issues in $$file"; \
		done; \
	else \
		echo "‚ö†Ô∏è  clang not found, skipping thread safety analysis"; \
	fi

# Code coverage (requires gcov)
coverage: CFLAGS += --coverage
coverage: CXXFLAGS += --coverage
coverage: clean $(TEST_BINARY)
	@echo "üìà Generating code coverage report"
	./$(TEST_BINARY)
	@if command -v gcov >/dev/null 2>&1; then \
		gcov $(LOCKING_SOURCES); \
		echo "‚úÖ Coverage report generated"; \
	else \
		echo "‚ö†Ô∏è  gcov not found, skipping coverage report"; \
	fi

# Static analysis (requires cppcheck)
analyze:
	@echo "üî¨ Running static analysis"
	@if command -v cppcheck >/dev/null 2>&1; then \
		cppcheck --enable=all --std=c99 $(LOCKING_SOURCES); \
		cppcheck --enable=all --std=c++17 $(TEST_SOURCES); \
	else \
		echo "‚ö†Ô∏è  cppcheck not found, skipping static analysis"; \
	fi

# Format code (requires clang-format)
format:
	@echo "üé® Formatting code"
	@if command -v clang-format >/dev/null 2>&1; then \
		for file in $(LOCKING_SOURCES) $(TEST_SOURCES); do \
			echo "Formatting $$file..."; \
			clang-format -i $$file; \
		done; \
		echo "‚úÖ Code formatted"; \
	else \
		echo "‚ö†Ô∏è  clang-format not found, skipping code formatting"; \
	fi

# Stress test with high thread counts
stress_test: $(TEST_BINARY)
	@echo "üí™ Running stress test with high concurrency"
	@echo "============================================="
	@for threads in 32 64 128; do \
		echo "Testing with $$threads threads..."; \
		timeout 30s ./$(TEST_BINARY) || echo "Stress test completed/timeout"; \
	done

# Lock contention analysis
contention_analysis: $(TEST_BINARY)
	@echo "üîç Analyzing lock contention patterns"
	@echo "====================================="
	./$(TEST_BINARY) 2>&1 | grep -E "(contention|deadlock|ops/sec)" || echo "Analysis completed"

# Performance profiling (requires perf)
profile: $(TEST_BINARY)
	@echo "üìä Running performance profiling"
	@if command -v perf >/dev/null 2>&1; then \
		perf record -g ./$(TEST_BINARY); \
		perf report; \
	else \
		echo "‚ö†Ô∏è  perf not found, skipping profiling"; \
	fi

# Package for distribution
package: clean all docs
	@echo "üì¶ Creating locking system distribution package"
	@mkdir -p vexfs_locking_package
	@cp $(LOCKING_SOURCES) vexfs_locking_package/
	@cp $(LOCKING_HEADERS) vexfs_locking_package/
	@cp $(TEST_SOURCES) vexfs_locking_package/
	@cp $(TEST_BINARY) vexfs_locking_package/
	@cp Makefile.locking vexfs_locking_package/Makefile
	@cp locking_docs.txt vexfs_locking_package/
	@tar -czf vexfs_locking.tar.gz vexfs_locking_package/
	@rm -rf vexfs_locking_package/
	@echo "‚úÖ Package created: vexfs_locking.tar.gz"

# Integration test with VexFS
integration_test: $(TEST_BINARY)
	@echo "üîó Running integration tests with VexFS"
	@echo "======================================="
	@echo "Testing locking integration..."
	./$(TEST_BINARY)
	@echo "‚úÖ Integration test completed"

# Declare phony targets
.PHONY: all locking_system test_suite test benchmark check docs clean install uninstall help status memcheck thread_check coverage analyze format stress_test contention_analysis profile package integration_test

# Default goal
.DEFAULT_GOAL := all