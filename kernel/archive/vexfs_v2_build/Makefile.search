# VexFS v2.0 Search Functionality Build System
#
# This Makefile builds the Phase 2 search test programs and utilities
# for testing k-NN search, similarity matching, and semantic operations.
#
# Copyright (C) 2024 VexFS Development Team
# Licensed under GPL v2

CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99
LDFLAGS = -lm

# Source files
SEARCH_TEST_SRC = test_vector_search.c
SEARCH_DEMO_SRC = search_demo.c
SEMANTIC_TEST_SRC = semantic_filesystem_test.c

# Output binaries
SEARCH_TEST_BIN = test_vector_search
SEARCH_DEMO_BIN = search_demo
SEMANTIC_TEST_BIN = semantic_filesystem_test

# Header dependencies
HEADERS = vexfs_v2_uapi.h vexfs_v2_search.h

# Default target
all: $(SEARCH_TEST_BIN) $(SEARCH_DEMO_BIN) $(SEMANTIC_TEST_BIN)

# Build search test program
$(SEARCH_TEST_BIN): $(SEARCH_TEST_SRC) $(HEADERS)
	@echo "üî® Building VexFS v2.0 Search Test Program..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "‚úÖ Built: $@"

# Build search demo program
$(SEARCH_DEMO_BIN): $(SEARCH_DEMO_SRC) $(HEADERS)
	@echo "üî® Building VexFS v2.0 Search Demo..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "‚úÖ Built: $@"

# Build semantic filesystem test
$(SEMANTIC_TEST_BIN): $(SEMANTIC_TEST_SRC) $(HEADERS)
	@echo "üî® Building VexFS v2.0 Semantic Filesystem Test..."
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)
	@echo "‚úÖ Built: $@"

# Create search demo source if it doesn't exist
$(SEARCH_DEMO_SRC):
	@echo "üìù Creating search demo source..."
	@echo "/* Search demo placeholder */" > $@

# Create semantic test source if it doesn't exist
$(SEMANTIC_TEST_SRC):
	@echo "üìù Creating semantic test source..."
	@echo "/* Semantic test placeholder */" > $@

# Test targets
test: $(SEARCH_TEST_BIN)
	@echo "üß™ Running VexFS v2.0 Search Tests..."
	@echo "Note: Requires VexFS to be mounted at /tmp/vexfs_test"
	@if [ -d "/tmp/vexfs_test" ]; then \
		./$(SEARCH_TEST_BIN); \
	else \
		echo "‚ùå VexFS not mounted at /tmp/vexfs_test"; \
		echo "   Please mount VexFS first or specify mount point"; \
	fi

test-with-mount: $(SEARCH_TEST_BIN)
	@echo "üß™ Running VexFS v2.0 Search Tests with custom mount point..."
	@read -p "Enter VexFS mount point: " mount_point; \
	./$(SEARCH_TEST_BIN) $$mount_point

demo: $(SEARCH_DEMO_BIN)
	@echo "üé¨ Running VexFS v2.0 Search Demo..."
	@if [ -f "./$(SEARCH_DEMO_BIN)" ]; then \
		./$(SEARCH_DEMO_BIN); \
	else \
		echo "‚ùå Demo not implemented yet"; \
	fi

semantic-test: $(SEMANTIC_TEST_BIN)
	@echo "üß† Running VexFS v2.0 Semantic Filesystem Tests..."
	@if [ -f "./$(SEMANTIC_TEST_BIN)" ]; then \
		./$(SEMANTIC_TEST_BIN); \
	else \
		echo "‚ùå Semantic tests not implemented yet"; \
	fi

# Performance testing
perf-test: $(SEARCH_TEST_BIN)
	@echo "‚ö° Running VexFS v2.0 Search Performance Tests..."
	@echo "This will test search performance across different vector dimensions"
	./$(SEARCH_TEST_BIN) /tmp/vexfs_test

# Benchmark different search algorithms
benchmark: $(SEARCH_TEST_BIN)
	@echo "üìä Running VexFS v2.0 Search Benchmarks..."
	@echo "Testing different distance metrics and search parameters..."
	@for metric in euclidean cosine dot_product manhattan; do \
		echo "Testing $$metric distance metric..."; \
		./$(SEARCH_TEST_BIN) /tmp/vexfs_test; \
	done

# Clean build artifacts
clean:
	@echo "üßπ Cleaning VexFS v2.0 Search build artifacts..."
	rm -f $(SEARCH_TEST_BIN) $(SEARCH_DEMO_BIN) $(SEMANTIC_TEST_BIN)
	rm -f *.o *.so *.a
	@echo "‚úÖ Clean complete"

# Install binaries (optional)
install: all
	@echo "üì¶ Installing VexFS v2.0 Search tools..."
	@mkdir -p /usr/local/bin
	@cp $(SEARCH_TEST_BIN) /usr/local/bin/
	@cp $(SEARCH_DEMO_BIN) /usr/local/bin/ 2>/dev/null || true
	@cp $(SEMANTIC_TEST_BIN) /usr/local/bin/ 2>/dev/null || true
	@echo "‚úÖ Installation complete"

# Uninstall binaries
uninstall:
	@echo "üóëÔ∏è  Uninstalling VexFS v2.0 Search tools..."
	@rm -f /usr/local/bin/$(SEARCH_TEST_BIN)
	@rm -f /usr/local/bin/$(SEARCH_DEMO_BIN)
	@rm -f /usr/local/bin/$(SEMANTIC_TEST_BIN)
	@echo "‚úÖ Uninstallation complete"

# Help target
help:
	@echo "VexFS v2.0 Search Functionality Build System"
	@echo "============================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Build all search test programs"
	@echo "  test             - Run basic search tests (requires VexFS mounted)"
	@echo "  test-with-mount  - Run tests with custom mount point"
	@echo "  demo             - Run search demonstration"
	@echo "  semantic-test    - Run semantic filesystem tests"
	@echo "  perf-test        - Run performance tests"
	@echo "  benchmark        - Run comprehensive benchmarks"
	@echo "  clean            - Clean build artifacts"
	@echo "  install          - Install binaries to /usr/local/bin"
	@echo "  uninstall        - Remove installed binaries"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Requirements:"
	@echo "  - VexFS v2.0 kernel module loaded"
	@echo "  - VexFS mounted (typically at /tmp/vexfs_test)"
	@echo "  - gcc compiler with math library support"
	@echo ""
	@echo "Example usage:"
	@echo "  make all         # Build all programs"
	@echo "  make test        # Run tests"
	@echo "  make perf-test   # Run performance tests"

# Development targets
dev: all
	@echo "üîß Development build complete"
	@echo "Available programs:"
	@ls -la $(SEARCH_TEST_BIN) $(SEARCH_DEMO_BIN) $(SEMANTIC_TEST_BIN) 2>/dev/null || true

debug: CFLAGS += -g -DDEBUG
debug: all
	@echo "üêõ Debug build complete"

# Check if VexFS is available
check-vexfs:
	@echo "üîç Checking VexFS availability..."
	@if lsmod | grep -q vexfs; then \
		echo "‚úÖ VexFS kernel module is loaded"; \
	else \
		echo "‚ùå VexFS kernel module not loaded"; \
		echo "   Load with: sudo insmod vexfs_v2_b62.ko"; \
	fi
	@if [ -d "/tmp/vexfs_test" ]; then \
		echo "‚úÖ VexFS mount point exists: /tmp/vexfs_test"; \
	else \
		echo "‚ùå VexFS mount point not found: /tmp/vexfs_test"; \
		echo "   Create and mount VexFS first"; \
	fi

# Phony targets
.PHONY: all test test-with-mount demo semantic-test perf-test benchmark clean install uninstall help dev debug check-vexfs

# Default goal
.DEFAULT_GOAL := all