--- a/kernel/vexfs_v2_build/vexfs_v2_main.c
+++ b/kernel/vexfs_v2_build/vexfs_v2_main.c
@@ -146,6 +146,15 @@ struct vexfs_v2_sb_info {
     __u32 preferred_numa_node;  /* Preferred NUMA node for allocations */
     
+    /* Enhanced registration system fields */
+    __u32 max_vector_dim;       /* Maximum vector dimension allowed */
+    __u32 cache_size_mb;        /* Cache size in megabytes */
+    __u32 prefetch_size;        /* Prefetch size for vector operations */
+    __u32 hnsw_m;              /* HNSW M parameter */
+    __u32 hnsw_ef_construction; /* HNSW ef_construction parameter */
+    __u32 debug_level;          /* Debug verbosity level */
+    bool numa_aware;            /* NUMA awareness enabled */
+    bool vector_ops_registered; /* Vector operations registered flag */
+    
     /* Reserved for future extensions */
     __u32 reserved[16];         /* Reserved fields for future use */
 };
@@ -1666,11 +1675,18 @@ static struct file_system_type vexfs_v2_fs_type = {
 static struct file_system_type vexfs_v2_fs_type = {
     .owner      = THIS_MODULE,
-    .name       = "vexfs_v2_b62",
-    .mount      = vexfs_v2_mount,
-    .kill_sb    = vexfs_v2_kill_sb,
+    .name       = "vexfs",
+    .mount      = vexfs_v2_enhanced_mount,
+    .kill_sb    = vexfs_v2_enhanced_kill_sb,
+    .show_options = vexfs_show_mount_options,
     .fs_flags   = 0,
 };
 
+/* Include enhanced registration system */
+#include "vexfs_v2_enhanced_registration.h"
+#include "vexfs_v2_enhanced_registration.c"
+#include "vexfs_v2_enhanced_registration_part2.c"
+
 /*
  * ðŸš€ Inode cache management ðŸš€
  */
@@ -1713,7 +1729,7 @@ static int __init vexfs_v2_init(void)
     if (ret)
         return ret;
     
-    ret = register_filesystem(&vexfs_v2_fs_type);
+    ret = vexfs_register_enhanced_filesystem();
     if (ret) {
         vexfs_v2_destroy_inodecache();
         return ret;
@@ -2341,7 +2357,7 @@ static void __exit vexfs_v2_exit(void)
     /* ðŸ”¥ Cleanup monitoring system */
     vexfs_monitoring_cleanup();
     
-    unregister_filesystem(&vexfs_v2_fs_type);
+    vexfs_unregister_enhanced_filesystem();
     vexfs_v2_destroy_inodecache();
     printk(KERN_INFO "VexFS v2.0: module unloaded ðŸš€\n");
 }