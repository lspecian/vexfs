--- a/kernel/vexfs_v2_build/vexfs_v2_main.c
+++ b/kernel/vexfs_v2_build/vexfs_v2_main.c
@@ -147,6 +147,9 @@ struct vexfs_v2_sb_info {
     
     /* Enhanced registration system fields */
     __u32 max_vector_dim;       /* Maximum vector dimension allowed */
+    __u32 vector_page_order;    /* Page allocation order for vector data */
+    __u32 prefetch_size;        /* Prefetch size for vector operations */
+    __u32 cache_size_mb;        /* Cache size in megabytes */
     __u32 cache_size_mb;        /* Cache size in megabytes */
     __u32 prefetch_size;        /* Prefetch size for vector operations */
     __u32 hnsw_m;              /* HNSW M parameter */
@@ -1422,11 +1425,18 @@ static ssize_t vexfs_v2_file_write(struct file *file, const char __user *buf,
     return count;
 }
 
+/* Include enhanced file operations */
+#include "vexfs_v2_enhanced_file_ops.h"
+#include "vexfs_v2_enhanced_file_ops.c"
+#include "vexfs_v2_enhanced_file_ops_part2.c"
+
+/* Enhanced file operations structure (replaces basic one) */
 static const struct file_operations vexfs_v2_file_operations = {
-    .read           = vexfs_v2_file_read,
-    .write          = vexfs_v2_file_write,
+    .read           = vexfs_enhanced_read,
+    .write          = vexfs_enhanced_write,
+    .mmap           = vexfs_enhanced_mmap,
     .llseek         = generic_file_llseek,
+    .fsync          = vexfs_enhanced_fsync,
+    .flush          = vexfs_enhanced_flush,
     .unlocked_ioctl = vexfs_vector_ioctl,
     .compat_ioctl   = vexfs_vector_ioctl,
 };
@@ -1540,6 +1550,12 @@ int vexfs_v2_fill_super(struct super_block *sb, void *data, int silent)
     sbi->simd_capabilities = detect_simd_capabilities();
     sbi->simd_vector_width = detect_simd_vector_width(sbi->simd_capabilities);
     
+    /* Initialize enhanced file operations */
+    ret = vexfs_init_enhanced_file_ops(sb);
+    if (ret) {
+        printk(KERN_ERR "VexFS v2.0: Failed to initialize enhanced file operations\n");
+        goto cleanup_sbi;
+    }
+    
     /* Set up root inode */
     root_inode = new_inode(sb);
     if (!root_inode) {
@@ -1651,6 +1667,9 @@ static void vexfs_v2_kill_sb(struct super_block *sb)
 {
     struct vexfs_v2_sb_info *sbi = VEXFS_V2_SB(sb);
     
+    /* Cleanup enhanced file operations */
+    vexfs_cleanup_enhanced_file_ops(sb);
+    
     kill_anon_super(sb);
     if (sbi) {
         kfree(sbi);