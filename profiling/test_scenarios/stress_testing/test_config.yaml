# Stress Testing Configuration
# Tests VexFS FUSE implementation under extreme conditions and memory pressure

test_scenarios:
  # Memory Pressure Tests
  memory_pressure:
    - name: "low_memory_environment"
      available_memory: "128MB"
      vector_count: 10000
      dimensions: 256
      description: "Test under severe memory constraints"
      expected_behavior: "graceful_degradation"
      
    - name: "memory_fragmentation_stress"
      available_memory: "512MB"
      vector_count: 25000
      dimensions: 512
      fragmentation_pattern: "alternating_alloc_free"
      description: "Test with high memory fragmentation"
      expected_behavior: "allocation_failures"
      
    - name: "memory_leak_detection"
      available_memory: "1GB"
      vector_count: 50000
      dimensions: 256
      test_duration: "300s"
      operation_pattern: "continuous_alloc"
      description: "Long-running test to detect memory leaks"
      expected_behavior: "stable_memory_usage"
      
    - name: "oom_recovery_test"
      available_memory: "256MB"
      vector_count: 100000
      dimensions: 1024
      description: "Test recovery from out-of-memory conditions"
      expected_behavior: "graceful_failure"

  # Limited Stack Space Tests
  limited_stack:
    - name: "minimal_stack_space"
      stack_limit: "64KB"
      vector_count: 5000
      dimensions: 256
      hnsw_M: 16
      hnsw_efConstruction: 200
      description: "Test with minimal stack space"
      expected_behavior: "stack_overflow_prevention"
      
    - name: "reduced_stack_space"
      stack_limit: "256KB"
      vector_count: 10000
      dimensions: 512
      hnsw_M: 32
      hnsw_efConstruction: 400
      description: "Test with reduced stack space"
      expected_behavior: "limited_recursion"
      
    - name: "stack_exhaustion_test"
      stack_limit: "128KB"
      vector_count: 20000
      dimensions: 1024
      hnsw_M: 64
      hnsw_efConstruction: 800
      description: "Test designed to exhaust stack space"
      expected_behavior: "controlled_failure"
      
    - name: "dynamic_stack_adjustment"
      stack_limit: "variable"
      vector_count: 15000
      dimensions: 256
      stack_adjustment_pattern: "decreasing"
      description: "Test with dynamically decreasing stack space"
      expected_behavior: "adaptive_behavior"

  # Rapid Initialization/Deinitialization Cycles
  rapid_cycles:
    - name: "rapid_mount_unmount"
      cycles: 1000
      cycle_interval: "100ms"
      vector_count: 1000
      dimensions: 128
      description: "Rapid FUSE mount/unmount cycles"
      expected_behavior: "stable_cycles"
      
    - name: "component_thrashing"
      cycles: 500
      cycle_interval: "50ms"
      components: ["vector_storage_manager", "vector_search_engine"]
      description: "Rapid component initialization/deinitialization"
      expected_behavior: "resource_cleanup"
      
    - name: "memory_thrashing"
      cycles: 200
      cycle_interval: "200ms"
      vector_count: 5000
      dimensions: 256
      operation: "full_reload"
      description: "Rapid memory allocation/deallocation cycles"
      expected_behavior: "memory_stability"
      
    - name: "concurrent_cycle_stress"
      cycles: 100
      cycle_interval: "500ms"
      threads: 4
      vector_count: 2000
      dimensions: 256
      description: "Concurrent rapid cycles from multiple threads"
      expected_behavior: "thread_safety"

  # Error Recovery Scenarios
  error_recovery:
    - name: "filesystem_errors"
      error_injection: "filesystem"
      error_types: ["ENOSPC", "EIO", "EACCES"]
      error_frequency: "10%"
      vector_count: 10000
      dimensions: 256
      description: "Test recovery from filesystem errors"
      expected_behavior: "error_propagation"
      
    - name: "network_interruption"
      error_injection: "network"
      error_types: ["connection_timeout", "connection_reset"]
      error_frequency: "5%"
      vector_count: 8000
      dimensions: 512
      description: "Test recovery from network interruptions"
      expected_behavior: "retry_logic"
      
    - name: "corruption_recovery"
      error_injection: "data_corruption"
      corruption_types: ["vector_data", "metadata", "index"]
      corruption_frequency: "1%"
      vector_count: 15000
      dimensions: 256
      description: "Test recovery from data corruption"
      expected_behavior: "corruption_detection"
      
    - name: "cascading_failures"
      error_injection: "cascading"
      initial_failure: "storage_manager"
      cascade_pattern: "dependent_components"
      vector_count: 5000
      dimensions: 256
      description: "Test recovery from cascading component failures"
      expected_behavior: "failure_isolation"

  # High Concurrency Stress Tests
  high_concurrency:
    - name: "many_readers"
      threads: 50
      thread_type: "reader"
      vector_count: 20000
      dimensions: 256
      operations_per_thread: 1000
      description: "High concurrency read operations"
      expected_behavior: "read_scalability"
      
    - name: "many_writers"
      threads: 20
      thread_type: "writer"
      vector_count: 10000
      dimensions: 512
      operations_per_thread: 500
      description: "High concurrency write operations"
      expected_behavior: "write_coordination"
      
    - name: "mixed_workload"
      threads: 30
      thread_types: ["reader", "writer", "searcher"]
      thread_distribution: [15, 10, 5]
      vector_count: 15000
      dimensions: 256
      operations_per_thread: 800
      description: "Mixed high concurrency workload"
      expected_behavior: "workload_balance"
      
    - name: "contention_stress"
      threads: 40
      thread_type: "mixed"
      vector_count: 8000
      dimensions: 256
      contention_pattern: "hotspot"
      operations_per_thread: 1000
      description: "High contention stress test"
      expected_behavior: "contention_handling"

  # Resource Exhaustion Tests
  resource_exhaustion:
    - name: "file_descriptor_exhaustion"
      max_file_descriptors: 100
      vector_count: 10000
      dimensions: 256
      concurrent_files: 150
      description: "Test file descriptor exhaustion"
      expected_behavior: "fd_management"
      
    - name: "thread_exhaustion"
      max_threads: 50
      concurrent_operations: 100
      vector_count: 5000
      dimensions: 256
      description: "Test thread pool exhaustion"
      expected_behavior: "thread_pooling"
      
    - name: "disk_space_exhaustion"
      available_disk_space: "100MB"
      vector_count: 50000
      dimensions: 1024
      description: "Test disk space exhaustion"
      expected_behavior: "space_management"
      
    - name: "cpu_exhaustion"
      cpu_limit: "50%"
      vector_count: 25000
      dimensions: 512
      hnsw_M: 64
      hnsw_efConstruction: 800
      description: "Test under CPU constraints"
      expected_behavior: "cpu_efficiency"

  # Long-Running Stability Tests
  long_running:
    - name: "24_hour_stability"
      duration: "24h"
      vector_count: 10000
      dimensions: 256
      operation_rate: "100 ops/min"
      description: "24-hour stability test"
      expected_behavior: "long_term_stability"
      
    - name: "memory_growth_monitoring"
      duration: "12h"
      vector_count: 20000
      dimensions: 512
      operation_pattern: "continuous_growth"
      description: "Monitor memory growth over time"
      expected_behavior: "bounded_memory_growth"
      
    - name: "performance_degradation"
      duration: "6h"
      vector_count: 15000
      dimensions: 256
      operation_pattern: "constant_load"
      description: "Monitor performance degradation over time"
      expected_behavior: "stable_performance"
      
    - name: "resource_leak_detection"
      duration: "8h"
      vector_count: 8000
      dimensions: 256
      operation_pattern: "cyclic_operations"
      description: "Long-term resource leak detection"
      expected_behavior: "no_resource_leaks"

# Stress Test Configuration
stress_config:
  resource_limits:
    memory_limit: "configurable"
    stack_limit: "configurable"
    cpu_limit: "configurable"
    disk_limit: "configurable"
    
  monitoring:
    resource_usage: true
    performance_metrics: true
    error_rates: true
    recovery_times: true
    
  failure_injection:
    enabled: true
    random_failures: true
    targeted_failures: true
    cascading_failures: true
    
  recovery_testing:
    automatic_recovery: true
    manual_intervention: false
    recovery_validation: true

# Profiling Configuration
profiling:
  tools:
    - valgrind
    - perf
    - ebpf
    - stress-ng
    
  stress_monitoring:
    enabled: true
    resource_tracking: true
    failure_tracking: true
    recovery_tracking: true
    
  performance_tracking:
    enabled: true
    latency_tracking: true
    throughput_tracking: true
    resource_efficiency: true
    
  stability_analysis:
    enabled: true
    crash_detection: true
    hang_detection: true
    memory_leak_detection: true

# Success Criteria
success_criteria:
  stability:
    no_crashes: true
    no_hangs: true
    no_data_corruption: true
    graceful_degradation: true
    
  resource_management:
    bounded_memory_usage: true
    proper_resource_cleanup: true
    no_resource_leaks: true
    efficient_resource_usage: true
    
  error_handling:
    proper_error_propagation: true
    graceful_failure_recovery: true
    no_silent_failures: true
    consistent_error_behavior: true
    
  performance:
    acceptable_degradation: "< 50%"
    recovery_time: "< 30s"
    resource_efficiency: "> 70%"
    
  concurrency:
    thread_safety: true
    deadlock_freedom: true
    race_condition_freedom: true
    scalable_performance: true