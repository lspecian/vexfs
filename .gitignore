# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
dev-debug.log

# Dependency directories
node_modules/

# Environment variables
.env

# Roo configuration (contains API keys)
.roo/
.roo/mcp.json

.windsurfrules
# Editor directories and files
.idea
.vscode
.cursor/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Rust build artifacts
target/
vexctl/target/
*.rlib
size_check
size_test*
vector_storage_test

# Python virtual environments
workbench/workbench_env/
tests/legacy/bin/
tests/legacy/lib/
tests/legacy/pyvenv.cfg
benchmarks/venv/
*.pyc
__pycache__/

# OS specific
.DS_Store

# Task files (but keep Task Master tasks directory)
# tasks.json
# tasks/

# Added by Claude Task Master
# Task files
tasks.json
tasks/ 

.windsurfrules
.roomodes
.taskmasterconfig
scripts/
# Large VM images
tests/legacy/vm_management/vm/images/*.qcow2
tests/legacy/vm_management/vm/images/*.img

# Docker related
**/docker-build.log
**/docker-run.log
.dockerignore
Dockerfile.local
docker-compose.local.yml
.env.docker
# If build artifacts are consistently produced outside Docker's build context
# or if specific local Docker configurations generate them:
# target-docker/

# Named volume data (usually managed by Docker, but good to ignore if mapped to local dir accidentally)
vexfs_data/

# Kernel module build artifacts
*.ko
*.o
*.mod
*.mod.c
.*.cmd
.tmp_versions/
Module.symvers
modules.order
libvexfs.a
vexfs_rust_combined.o
vexfs_rust_combined_raw.o
.rust_extract/
extracted_objects/

# Rust build artifacts (comprehensive)
rust/target/
.cargo/

# Kernel module backups
kernel/vexfs_module_entry.c.backup

# Test artifacts
/tmp/vexfs_*
/tmp/mkfs_vexfs_*
*.img
*.qcow2
tests/legacy/vm_management/vm/

# Test results (generated artifacts, not source code)
test_results/
benchmarks/*results*.json
benchmarks/competitive_results*.json
benchmarks/vexfs_fuse

# VM ISO files - download separately
*.iso
tests/vm_testing/vm/*.iso

# VM ISO files - download separately
*.iso
tests/vm_testing/vm/*.iso
