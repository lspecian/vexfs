# VexFS v2.0 Modular Kernel Build Configuration
# 
# This build configuration implements the modular codebase structure
# with clear separation between core filesystem and semantic extensions.

obj-m := vexfs_deadlock_fix.o

# Core filesystem components (Phase 1: Essential VFS functionality)
vexfs-core-objs := core/main.o \
                   core/superblock.o \
                   core/block.o \
                   core/inode.o \
                   core/dir.o \
                   core/dir_fix.o \
                   core/file.o \
                   core/file_enhanced.o

# Semantic extension components (Phase 1: minimal implementation)
vexfs-semantic-objs := semantic/vector_ops.o

# Build only core components for Phase 1 (semantic extensions disabled for now)
vexfs_deadlock_fix-objs := $(vexfs-core-objs) \
                           $(vexfs-semantic-objs)

# Compiler flags
ccflags-y += -DVEXFS_ENABLED
ccflags-y += -DVEXFS_VERSION_MAJOR=2
ccflags-y += -DVEXFS_VERSION_MINOR=0
ccflags-y += -DVEXFS_MODULAR_BUILD
ccflags-y += -I$(src)/include

# Feature flags
ccflags-y += -DVEXFS_FEATURE_DISK_PERSISTENCE
ccflags-y += -DVEXFS_FEATURE_SEMANTIC_SEARCH
ccflags-y += -DVEXFS_FEATURE_VECTOR_INDEXING

# Debug flags (comment out for release builds)
ccflags-y += -DDEBUG
ccflags-y += -DVEXFS_DEBUG_VERBOSE

# Optimization flags
ccflags-y += -O2
ccflags-y += -fno-strict-aliasing

# Warning flags
ccflags-y += -Wall
ccflags-y += -Wextra
ccflags-y += -Wno-unused-parameter
ccflags-y += -Wno-missing-field-initializers