[package]
name = "vexfs"
version = "0.0.4"
edition = "2021"
authors = ["VexFS Contributors"]
description = "Vector Extended File System - A filesystem optimized for vector embeddings and similarity search"
repository = "https://github.com/vexfs/vexfs"
license = "Apache-2.0"
readme = "README.md"
keywords = ["filesystem", "vector", "embeddings", "similarity-search", "kernel"]
categories = ["filesystem", "science", "data-structures"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Note: VexFS uses C FFI approach for kernel integration, not Rust-for-Linux

# Dependencies for no_std compatibility
hashbrown = { version = "0.14", default-features = false }
libm = { version = "0.2", default-features = false }
derivative = "2.2"
linked_list_allocator = { version = "0.10", optional = true }

# FUSE dependencies (optional for userspace testing)
fuse = { version = "0.3", optional = true }
time = { version = "0.3", optional = true }
time01 = { package = "time", version = "0.1", optional = true }
clap = { version = "4.0", optional = true }
libc = { version = "0.2", optional = true }

# VexCtl dependencies (optional for CLI tool)
nix = { version = "0.27", optional = true }
console = { version = "0.15", optional = true }
tabled = { version = "0.14", optional = true }
indicatif = { version = "0.17", optional = true }
thiserror = { version = "1.0", optional = true }
url = { version = "2.0", optional = true }

# Server dependencies (optional for ChromaDB-compatible API)
axum = { version = "0.7", features = ["ws"], optional = true }
tokio = { version = "1.28.2", features = ["full"], optional = true }
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
tower = { version = "0.4", features = ["util"], optional = true }
tower-http = { version = "0.5", features = ["cors", "fs", "set-header", "trace"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"], optional = true }
chrono = { version = "0.4", features = ["serde"], optional = true }

# VexGraph dependencies (Task 17)
petgraph = { version = "0.6", optional = true }
dashmap = { version = "5.5", optional = true }
rayon = { version = "1.8", optional = true }
parking_lot = { version = "0.12", optional = true }
crossbeam = { version = "0.8", optional = true }
async-trait = { version = "0.1", optional = true }
reqwest = { version = "0.11", features = ["json"], optional = true }

# Semantic Event API dependencies
tokio-stream = { version = "0.1", optional = true }
futures = { version = "0.3", optional = true }
governor = { version = "0.6", optional = true }
jsonwebtoken = { version = "9.2", optional = true }
ring = { version = "0.17", optional = true }
base64 = { version = "0.21", optional = true }
lz4 = { version = "1.24", optional = true }
flate2 = { version = "1.0", optional = true }

# Additional serialization formats for semantic API
rmp-serde = { version = "1.1", optional = true }
serde_cbor = { version = "0.11", optional = true }
bincode = { version = "1.3", optional = true }

# Utilities for semantic API
md5 = { version = "0.7", optional = true }
lru = { version = "0.12", optional = true }
async-stream = { version = "0.3", optional = true }
im = { version = "15.1", optional = true, features = ["serde"] }
fastrand = { version = "2.0", optional = true }

[dev-dependencies]
chrono = { version = "0.4", features = ["serde"] }

[lib]
crate-type = ["lib", "staticlib"]
path = "src/lib.rs"

# Binary targets
[[bin]]
name = "vexctl"
path = "src/bin/vexctl.rs"
required-features = ["vexctl"]

[[bin]]
name = "vexfs_fuse"
path = "src/bin/vexfs_fuse.rs"
required-features = ["fuse_support"]

[[bin]]
name = "vexfs_unified_server"
path = "src/bin/vexfs_unified_server.rs"
required-features = ["server"]

[[bin]]
name = "mkfs_vexfs"
path = "src/bin/mkfs_vexfs.rs"
required-features = ["std"]

[[bin]]
name = "anns_benchmark_test"
path = "src/bin/anns_benchmark_test.rs"

[[bin]]
name = "comprehensive_test_runner"
path = "src/bin/comprehensive_test_runner.rs"

[[bin]]
name = "vector_test_runner"
path = "src/bin/vector_test_runner.rs"

[profile.dev]
panic = "abort"
opt-level = 0

[profile.release]
panic = "abort"
opt-level = 0

# Target-specific configuration for kernel module is now in .cargo/config.toml

# Features for conditional compilation
[features]
default = ["std"]
std = ["serde", "serde_json", "uuid"]
kernel = ["linked_list_allocator"]  # Keep for future RfL approach but disabled
c_bindings = []  # New feature for current C FFI approach
fuse_support = ["std", "fuse", "time", "time01", "clap", "libc"]  # FUSE userspace testing
vexctl = ["std", "nix", "console", "tabled", "indicatif", "thiserror", "clap", "chrono", "serde", "serde_json", "url"]  # VexCtl CLI tool
server = ["axum", "tokio", "tower", "tower-http", "tracing", "tracing-subscriber", "serde", "serde_json", "uuid", "chrono", "base64", "fastrand"]  # ChromaDB-compatible server
semantic_api = [
    "tokio", "tokio-stream", "futures", "dashmap", "governor",
    "jsonwebtoken", "ring", "base64", "lz4", "flate2",
    "rmp-serde", "serde_cbor", "bincode", "md5", "lru", "async-stream",
    "axum", "serde", "serde_json", "uuid", "tower", "tower-http",
    "tracing", "tracing-subscriber", "chrono", "crossbeam", "rayon", "im", "std"
]  # Agent-Facing Semantic Event API (Task 13)
vexgraph = [
    "petgraph", "dashmap", "rayon", "parking_lot", "crossbeam",
    "axum", "tokio", "tower", "tower-http", "tracing", "tracing-subscriber",
    "serde", "serde_json", "uuid", "chrono", "dep:async-trait", "dep:reqwest", "std"
]  # VexGraph Native Graph Representation and API (Task 17)
crossbeam = ["dep:crossbeam"]
tokio = ["dep:tokio"]
tracing = ["dep:tracing"]
cross_layer_integration = ["semantic_api"]
encryption = []
compression = []

# Example configurations
[[example]]
name = "task_23_2_fuse_vector_storage_test"
path = "../examples/task_23_2_fuse_vector_storage_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "task_23_7_comprehensive_testing_example"
path = "../examples/task_23_7_comprehensive_testing_example.rs"
required-features = ["std"]

[[example]]
name = "semantic_api_rest_example"
path = "../examples/semantic_api_rest_example.rs"
required-features = ["semantic_api", "server", "std"]

[[example]]
name = "fuse_vector_operations_example"
path = "../examples/fuse_vector_operations_example.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "task_23_2_2_real_vector_search_test"
path = "../examples/task_23_2_2_real_vector_search_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "task_23_3_2_real_vector_integration_test"
path = "../examples/task_23_3_2_real_vector_integration_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "task_23_3_3_complete_hnsw_construction_test"
path = "../examples/task_23_3_3_complete_hnsw_construction_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "task_23_3_4_advanced_graph_analytics_test"
path = "../examples/task_23_3_4_advanced_graph_analytics_test.rs"
required-features = ["vexgraph", "std"]

[[example]]
name = "task_23_5_graph_journal_integration_example"
path = "../examples/task_23_5_graph_journal_integration_example.rs"
required-features = ["vexgraph", "semantic_api", "std"]

[[example]]
name = "task_23_5_phase_1_graph_journal_integration_example"
path = "../examples/task_23_5_phase_1_graph_journal_integration_example.rs"
required-features = ["vexgraph", "std"]

[[example]]
name = "task_23_5_phase_2_fuse_graph_integration_example"
path = "../examples/task_23_5_phase_2_fuse_graph_integration_example.rs"
required-features = ["vexgraph", "fuse_support", "std"]

[[example]]
name = "task_23_5_phase_3_advanced_graph_analytics_example"
path = "../examples/task_23_5_phase_3_advanced_graph_analytics_example.rs"
required-features = ["vexgraph", "std"]

[[example]]
name = "task_23_5_phase_4_semantic_reasoning_example"
path = "../examples/task_23_5_phase_4_semantic_reasoning_example.rs"
required-features = ["vexgraph", "semantic_api", "std"]

[[example]]
name = "task_23_5_phase_5_comprehensive_integration_example"
path = "../examples/task_23_5_phase_5_comprehensive_integration_example.rs"
required-features = ["vexgraph", "semantic_api", "fuse_support", "std"]

[[example]]
name = "task_23_6_complete_integration_test"
path = "../examples/task_23_6_complete_integration_test.rs"
required-features = ["vexgraph", "semantic_api", "fuse_support", "std"]

[[example]]
name = "task_23_6_phase_2_complete_example"
path = "../examples/task_23_6_phase_2_complete_example.rs"
required-features = ["vexgraph", "semantic_api", "std"]

[[example]]
name = "task_23_6_phase_3_complete_example"
path = "../examples/task_23_6_phase_3_complete_example.rs"
required-features = ["vexgraph", "semantic_api", "std"]

[[example]]
name = "task_23_6_phase_4_complete_example"
path = "../examples/task_23_6_phase_4_complete_example.rs"
required-features = ["vexgraph", "semantic_api", "std"]

[[example]]
name = "task_23_6_phase_4_distributed_coordination_example"
path = "../examples/task_23_6_phase_4_distributed_coordination_example.rs"
required-features = ["vexgraph", "semantic_api", "server", "std"]

[[example]]
name = "task_23_6_phase_5_reactive_automation_example"
path = "../examples/task_23_6_phase_5_reactive_automation_example.rs"
required-features = ["vexgraph", "semantic_api", "server", "std"]

[[example]]
name = "task_23_6_phase_6_complete_example"
path = "../examples/task_23_6_phase_6_complete_example.rs"
required-features = ["vexgraph", "semantic_api", "fuse_support", "server", "std"]

[[example]]
name = "task_23_8_performance_optimization_example"
path = "../examples/task_23_8_performance_optimization_example.rs"
required-features = ["vexgraph", "semantic_api", "fuse_support", "std"]

[[example]]
name = "advanced_graph_algorithms_example"
path = "../examples/advanced_graph_algorithms_example.rs"
required-features = ["vexgraph", "std"]

[[example]]
name = "bridge_integration_test"
path = "../examples/bridge_integration_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "fuse_journal_integration_example"
path = "../examples/fuse_journal_integration_example.rs"
required-features = ["fuse_support", "semantic_api", "std"]

[[example]]
name = "fuse_stack_profiling_example"
path = "../examples/fuse_stack_profiling_example.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "semantic_event_hooks_example"
path = "../examples/semantic_event_hooks_example.rs"
required-features = ["semantic_api", "std"]

[[example]]
name = "semantic_search_integration_example"
path = "../examples/semantic_search_integration_example.rs"
required-features = ["semantic_api", "fuse_support", "std"]

[[example]]
name = "simple_hnsw_fuse_test"
path = "../examples/simple_hnsw_fuse_test.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "userspace_semantic_journal_example"
path = "../examples/userspace_semantic_journal_example.rs"
required-features = ["semantic_api", "std"]

[[example]]
name = "vector_performance_benchmarks"
path = "../examples/vector_performance_benchmarks.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "vexfs_vector_integration_tests"
path = "../examples/vexfs_vector_integration_tests.rs"
required-features = ["fuse_support", "std"]

# Benchmark examples
[[example]]
name = "cow_snapshot_benchmark"
path = "../examples/benchmarks/cow_snapshot_benchmark.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "vector_benchmark"
path = "../examples/benchmarks/vector_benchmark.rs"
required-features = ["fuse_support", "std"]

[[example]]
name = "vector_cache_benchmark"
path = "../examples/benchmarks/vector_cache_benchmark.rs"
required-features = ["fuse_support", "std"]
