diff --git a/kernel_module/core/superblock.c b/kernel_module/core/superblock.c
index 1234567..8901234 100644
--- a/kernel_module/core/superblock.c
+++ b/kernel_module/core/superblock.c
@@ -303,12 +303,19 @@ static void vexfs_put_super(struct super_block *sb)
 {
     struct vexfs_sb_info *sbi = VEXFS_SB(sb);
     
-    printk(KERN_INFO "VexFS: Cleaning up superblock during unmount\n");
+    if (!sbi) {
+        printk(KERN_WARNING "VexFS: put_super called with NULL sb_info\n");
+        return;
+    }
+    
+    printk(KERN_INFO "VexFS: Starting put_super cleanup\n");
     
     /* Release buffer head if held */
     if (sbi->sb_bh) {
+        mark_buffer_dirty(sbi->sb_bh);
+        sync_dirty_buffer(sbi->sb_bh);
         brelse(sbi->sb_bh);
-        sbi->sb_bh = NULL;
+        sbi->sb_bh = NULL; 
     }
     
     /* Free superblock info */
@@ -316,7 +323,7 @@ static void vexfs_put_super(struct super_block *sb)
     sb->s_fs_info = NULL;
     /* DEADLOCK FIX: No mutex to destroy, spinlock cleanup is automatic */
     
-    printk(KERN_INFO "VexFS: Superblock cleanup completed\n");
+    printk(KERN_INFO "VexFS: put_super cleanup completed\n");
 }
 
 /**
diff --git a/kernel_module/core/inode.c b/kernel_module/core/inode.c
index 2345678..9012345 100644
--- a/kernel_module/core/inode.c
+++ b/kernel_module/core/inode.c
@@ -224,8 +224,11 @@ int vexfs_create(struct mnt_idmap *idmap, struct inode *dir,
     /* Initialize timestamps */
     struct timespec64 now = current_time(inode);
     inode_set_atime_to_ts(inode, now);
-    inode_set_ctime_to_ts(inode, now);
     inode_set_mtime_to_ts(inode, now);
+    inode_set_ctime_to_ts(inode, now);
+    
+    /* Mark inode as new */
+    inode->i_state |= I_NEW;
     
     /* Set up file operations based on mode */
     if (S_ISREG(inode->i_mode)) {
@@ -245,11 +248,17 @@ int vexfs_create(struct mnt_idmap *idmap, struct inode *dir,
     memset(vi->i_blocks, 0, sizeof(vi->i_blocks));
     /* DEADLOCK FIX: Removed mutex_init - VFS provides proper inode locking */
     
-    /* Add to directory */
+    /* Insert into inode hash before adding to directory */
+    insert_inode_hash(inode);
+    
+    /* Mark inode as initialized */
+    unlock_new_inode(inode);
+    
+    /* Add to directory - this will mark both inodes dirty */
     ret = vexfs_add_dir_entry(dir, dentry, inode);
     if (ret) {
-        iput(inode);
-        return ret;
+        drop_nlink(inode);
+        iput(inode); 
+        return ret; 
     }
     
     /* Attach inode to dentry */
diff --git a/kernel_module/core/main.c b/kernel_module/core/main.c
index 3456789..0123456 100644
--- a/kernel_module/core/main.c
+++ b/kernel_module/core/main.c
@@ -54,7 +54,14 @@ static struct dentry *vexfs_mount(struct file_system_type *fs_type,
 static void vexfs_kill_sb(struct super_block *sb)
 {
     printk(KERN_INFO "VexFS: Starting filesystem unmount\n");
     
+    /* Ensure all pending I/O is complete */
+    sync_filesystem(sb);
+    
+    /* Invalidate all inodes to reduce refcount */
+    invalidate_inodes(sb);
+    
     /* kill_block_super() will call put_super() for cleanup */
+    sb->s_flags |= SB_ACTIVE;  /* Ensure proper cleanup */
     kill_block_super(sb);
     
     printk(KERN_INFO "VexFS: Filesystem unmount completed\n");