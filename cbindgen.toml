language = "C"
header = """/* VexFS - Vector Extended File System C FFI Bindings
 * Copyright 2025 VexFS Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Note: Kernel module components are licensed under GPL v2.
 * See LICENSE.kernel for kernel-specific licensing terms.
 */

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

/* Kernel-space compatible headers */
#include <linux/types.h>
#include <linux/kernel.h>

/* Kernel-space type definitions - no standard library headers */
#ifndef __KERNEL__
#include <stdint.h>
#include <stdbool.h>
#endif
"""

trailer = """
#ifdef __cplusplus
}
#endif
"""

# Exclude problematic headers that cbindgen adds automatically
no_includes = true
sys_includes = []
includes = []

include_version = true

[defines]
"feature = \"kernel\"" = ""
braces = "SameLine"
line_length = "100"
tab_width = "4"

[export]
include = [
    # Core VFS functions
    "vexfs_rust_init",
    "vexfs_rust_exit",
    "vexfs_rust_fill_super",
    "vexfs_rust_test_basic",
    "vexfs_rust_test_vector_ops",
    "vexfs_rust_get_version",
    "vexfs_rust_get_statfs",
    "vexfs_rust_new_inode",
    "vexfs_rust_init_inode",
    "vexfs_rust_destroy_inode",
    "vexfs_rust_write_inode",
    "vexfs_rust_sync_fs",
    "vexfs_rust_put_super",
    "vexfs_rust_cleanup_superblock",
    
    # File operations
    "vexfs_create_file",
    "vexfs_open_file",
    "vexfs_read_file",
    "vexfs_write_file",
    "vexfs_truncate_file",
    "vexfs_unlink_file",
    "vexfs_close_file",
    "vexfs_seek_file",
    "vexfs_getattr_file",
    "vexfs_setattr_file",
    "vexfs_link_file",
    "vexfs_symlink_file",
    "vexfs_readlink_file",
    "vexfs_fsync_file",
    "vexfs_flock_file",
    "vexfs_mmap_file",
    
    # Directory operations
    "vexfs_mkdir",
    "vexfs_rmdir",
    "vexfs_lookup",
    "vexfs_opendir",
    "vexfs_readdir",
    "vexfs_closedir",
    "vexfs_rename",
    "vexfs_link",
    "vexfs_symlink",
    "vexfs_getdents",
    "vexfs_readlink",
    "vexfs_unlink",
    
    # Userspace testing functions
    "vexfs_rust_vector_search",
    "vexfs_rust_vector_storage",
    "vexfs_rust_userspace_init"
]

exclude = [
    "S_IFMT",
    "S_IFREG",
    "S_IFDIR",
    "S_IFCHR",
    "S_IFBLK",
    "S_IFIFO",
    "S_IFSOCK",
    "S_IFLNK"
]

[parse]
parse_deps = true
include = ["vexfs"]

[parse.expand]
features = ["kernel"]