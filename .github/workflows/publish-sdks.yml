name: Publish SDKs

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.0)'
        required: true
        type: string
      publish_python:
        description: 'Publish Python SDK'
        required: false
        type: boolean
        default: true
      publish_typescript:
        description: 'Publish TypeScript SDK'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-python-sdk:
    name: Publish Python SDK
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.publish_python == 'true'
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${VERSION#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Python package version
      working-directory: bindings/python
      run: |
        # Update version in Cargo.toml
        sed -i "s/^version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" Cargo.toml
        
        # Update version in pyproject.toml if it has a static version
        if grep -q "^version = " pyproject.toml; then
          sed -i "s/^version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" pyproject.toml
        fi

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
        working-directory: bindings/python

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.target }}
        path: bindings/python/dist

  publish-python-sdist:
    name: Publish Python Source Distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.publish_python == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${VERSION#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Python package version
      working-directory: bindings/python
      run: |
        sed -i "s/^version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" Cargo.toml
        if grep -q "^version = " pyproject.toml; then
          sed -i "s/^version = \".*\"/version = \"${{ steps.get_version.outputs.version }}\"/" pyproject.toml
        fi

    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist
        working-directory: bindings/python

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: bindings/python/dist

  release-python:
    name: Release Python SDK to PyPI
    runs-on: ubuntu-latest
    needs: [publish-python-sdk, publish-python-sdist]
    if: github.event_name == 'push' || github.event.inputs.publish_python == 'true'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: List artifacts
      run: ls -la dist/

    - name: Publish to PyPI
      uses: PyO3/maturin-action@v1
      with:
        command: upload
        args: --non-interactive --skip-existing dist/*
      env:
        MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  publish-typescript-sdk:
    name: Publish TypeScript SDK
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.publish_typescript == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${VERSION#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update TypeScript package version
      working-directory: bindings/typescript
      run: |
        npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version

    - name: Install dependencies
      working-directory: bindings/typescript
      run: npm ci

    - name: Run tests
      working-directory: bindings/typescript
      run: npm test

    - name: Build package
      working-directory: bindings/typescript
      run: npm run build

    - name: Create package tarball
      working-directory: bindings/typescript
      run: npm pack

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: typescript-package
        path: bindings/typescript/*.tgz

    - name: Publish to npm
      working-directory: bindings/typescript
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  verify-publications:
    name: Verify SDK Publications
    runs-on: ubuntu-latest
    needs: [release-python, publish-typescript-sdk]
    if: always() && (github.event_name == 'push' || github.event.inputs.publish_python == 'true' || github.event.inputs.publish_typescript == 'true')
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${VERSION#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Verify Python package on PyPI
      if: needs.release-python.result == 'success'
      run: |
        echo "Waiting for PyPI to update..."
        sleep 60
        
        # Try to install the package
        pip install vexfs==${{ steps.get_version.outputs.version }}
        python -c "import vexfs; print(f'Successfully imported vexfs version: {vexfs.__version__}')"

    - name: Verify TypeScript package on npm
      if: needs.publish-typescript-sdk.result == 'success'
      run: |
        echo "Waiting for npm to update..."
        sleep 30
        
        # Try to install the package
        npm install vexfs-sdk@${{ steps.get_version.outputs.version }}
        node -e "const vexfs = require('vexfs-sdk'); console.log('Successfully imported vexfs-sdk');"

    - name: Create verification summary
      run: |
        echo "## SDK Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.release-python.result }}" = "success" ]; then
          echo "✅ Python SDK published to PyPI successfully" >> $GITHUB_STEP_SUMMARY
          echo "   - Install: \`pip install vexfs==${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Python SDK publication failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.publish-typescript-sdk.result }}" = "success" ]; then
          echo "✅ TypeScript SDK published to npm successfully" >> $GITHUB_STEP_SUMMARY
          echo "   - Install: \`npm install vexfs-sdk@${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ TypeScript SDK publication failed" >> $GITHUB_STEP_SUMMARY
        fi