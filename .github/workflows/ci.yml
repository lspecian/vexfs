name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: false
          - rust: nightly
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libfuse3-dev \
          libssl-dev \
          linux-headers-$(uname -r) \
          curl

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy (std features)
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --no-default-features --features std -- -D warnings

    - name: Run clippy (kernel features)
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --no-default-features --features kernel -- -D warnings

    - name: Build (no features)
      run: cargo build --verbose

    - name: Build with std features
      run: cargo build --verbose --no-default-features --features std

    - name: Build with kernel features
      run: cargo build --verbose --no-default-features --features kernel

    - name: Build FUSE binary
      run: cargo build --verbose --no-default-features --features fuse_support --bin vexfs_fuse

    - name: Build unified server binary
      run: cargo build --verbose --no-default-features --features server --bin vexfs_unified_server

    - name: Run unit tests
      run: cargo test --verbose --lib

    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

    - name: Run performance tests
      run: cargo test --verbose --test performance_tests

    - name: Build Python bindings
      working-directory: bindings/python
      run: |
        pip install maturin
        maturin build

    - name: Build TypeScript SDK
      working-directory: bindings/typescript
      run: |
        npm install
        npm run build

    - name: Test TypeScript SDK
      working-directory: bindings/typescript
      run: npm test

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v2.0.11
      with:
        rust-version: stable

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libfuse3-dev \
          libssl-dev

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libfuse3-dev \
          libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl
        # Note: FUSE support on macOS requires macFUSE

    - name: Build
      run: cargo build --verbose --all-features

    - name: Test
      run: cargo test --verbose --lib

  check-docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Test documentation examples
      run: cargo test --doc --all-features

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker image
      run: |
        # Pull the image we just built
        docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
        
        # Run the container in background
        docker run -d --name vexfs-test \
          -p 8080:8080 -p 3000:3000 \
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        
        # Wait for services to start
        sleep 30
        
        # Test VexFS server health
        curl -f http://localhost:8080/api/v1/version || exit 1
        
        # Test dashboard accessibility
        curl -f http://localhost:3000/ || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8080/api/v1/collections || exit 1
        
        # Clean up
        docker stop vexfs-test
        docker rm vexfs-test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG.md
        git log --oneline --since="1 week ago" >> CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: VexFS Release v${{ github.run_number }}
        body: |
          ## VexFS Docker Images
          
          **Server + Dashboard:**
          ```bash
          docker pull ghcr.io/${{ github.repository }}:latest
          docker run -p 8080:8080 -p 3000:3000 ghcr.io/${{ github.repository }}:latest
          ```
          
          **Access:**
          - VexFS Server: http://localhost:8080
          - VexFS Dashboard: http://localhost:3000
          - API Documentation: http://localhost:8080/api/v1/version
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false