name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: ".github/changelog-config.json"
        toTag: ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: VexFS ${{ steps.get_version.outputs.version }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Rust Crate
          ```bash
          cargo add vexfs
          ```
          
          ### Python Package
          ```bash
          pip install vexfs
          ```
          
          ### TypeScript/Node.js Package
          ```bash
          npm install vexfs-sdk
          ```
          
          ### Docker Images
          ```bash
          # Development image
          docker pull ghcr.io/vexfs/vexfs:${{ steps.get_version.outputs.version }}
          
          # Server image
          docker pull ghcr.io/vexfs/vexfs-server:${{ steps.get_version.outputs.version }}
          ```
          
          ## Verification
          
          All release artifacts are signed and can be verified using the provided checksums.
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-binaries:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vexfs-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: vexfs-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vexfs-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vexfs-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libfuse3-dev \
          libssl-dev \
          musl-tools

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --features fuse_support,server
        
    - name: Create release archive
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/vexfs_fuse release/ || true
        cp target/${{ matrix.target }}/release/vexfs_server release/ || true
        cp README.md LICENSE release/
        cd release
        tar -czf ../${{ matrix.artifact_name }}.tar.gz *
        cd ..
        
    - name: Generate checksums
      run: |
        sha256sum ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.tar.gz.sha256
        asset_name: ${{ matrix.artifact_name }}.tar.gz.sha256
        asset_content_type: text/plain

  publish-crate:
    name: Publish Rust Crate
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libfuse3-dev \
          libssl-dev

    - name: Verify version matches tag
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        TAG_VERSION=${{ needs.create-release.outputs.version }}
        TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag is $TAG_VERSION"
          exit 1
        fi

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-version:
    name: Update Version for Next Development
    needs: [create-release, publish-crate]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(needs.create-release.outputs.version, '-')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version for next development
      run: |
        # This is a simple version bump - you might want to use a more sophisticated tool
        CURRENT_VERSION=${{ needs.create-release.outputs.version }}
        CURRENT_VERSION=${CURRENT_VERSION#v}  # Remove 'v' prefix
        
        # Simple patch version increment for development
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH-dev"
        
        # Update Cargo.toml
        sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
        
        # Update Python binding version
        sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" bindings/python/Cargo.toml
        
        # Commit changes
        git add Cargo.toml bindings/python/Cargo.toml
        git commit -m "chore: bump version to $NEW_VERSION for development"
        git push origin main